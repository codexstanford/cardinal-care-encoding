%% Comprehensive infertility services
covered_under_cardinal_care_24_25_benefit(C, treatment_of_infertility_benefit) :-
    claim.service_type(C, ServiceType) & 
    is_comprehensive_infertility_service(ServiceType) &
    patient_is_infertile(C) &
    meets_comprehensive_infertility_service_eligibility_requirements(C)

meets_comprehensive_infertility_service_eligibility_requirements(C) :-
    meets_no_voluntary_sterilization_req(C) &
    claim.demonstrated_and_documented_condition_causing_infertility(C, Condition) &
    ~member(Condition, [
        natural_menopause,
        natural_perimenopause,
        natural_male_reproductive_aging,
        other_natural_physiologic_process
    ]) &
    claim.successful_pregnancy_can_be_attained_through_less_costly_treatment_covered_by_plan(C, no) &
    patient_meets_day_3_fsh_level_criteria(C)

meets_no_voluntary_sterilization_req(C) :-
    claim.patient_has_had_voluntary_sterilization(C, no)

meets_no_voluntary_sterilization_req(C) :-
    claim.patient_has_partner(C, yes) &
    claim.patients_partner_has_had_voluntary_sterilization(C, no)

% If under 40, only care about most recent test
% Also a requirement for under 35, but is redundant here
patient_meets_day_3_fsh_level_criteria(C) :-
    patient_age_at_time_of_service(C, Age) &
    less(Age, 40) &
    most_recent_day_3_fsh_test(C, fsh_test(_, Level, _, _)) &
    less(Level, 19)

% If over 40, care about all tests performed after age 40
% Practically, this almost certainly means "since you became 40". But this is technically an assumption.
% Another practical assumption: There must be at least one test after age 40
patient_meets_day_3_fsh_level_criteria(C) :-
    patient_age_at_time_of_service(C, Age) &
    leq(40, Age) &
    claim.day_3_fsh_test_after_age_40(C, _) &
    countofall(T, claim.day_3_fsh_test_after_age_40(C, fsh_test(T, Level, _, _)) & leq(19, Level), 0)

% N/A if male
patient_meets_day_3_fsh_level_criteria(C) :-
    claim.patient_has_male_reproductive_organs(C, yes)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

medically_necessary_service(C) :-
    claim.service_type(C, ovulation_induction_cycle_with_menotropins) &
    patient_age_at_time_of_service(C, Age) &
    leq(Age, 37) &
    meets_ovulation_induction_cpb_reqs(C)

meets_ovulation_induction_cpb_reqs(C) :-
    patient_age_at_time_of_service(C, Age) &
    less(Age, 35) &
    meets_ovulation_induction_reqs_under_35(C)


meets_ovulation_induction_reqs_under_35(C) :-
    claim.num_months_regular_intravaginal_inseminations(C, N) &
    leq(12, N)

meets_ovulation_induction_reqs_under_35(C) :-
    claim.num_cycles_timed_intrauterine_intracervical_inseminations(C, N) &
    leq(4, N)

meets_ovulation_induction_cpb_reqs(C) :-
    patient_age_at_time_of_service(C, Age) &
    leq(35, Age) &
    meets_ovulation_induction_reqs_35_and_over(C)

meets_ovulation_induction_reqs_under_35(C) :-
    claim.num_months_regular_intravaginal_inseminations(C, N) &
    leq(6, N)

meets_ovulation_induction_reqs_35_and_over(C) :-
    claim.num_cycles_timed_intrauterine_intracervical_inseminations(C, N) &
    leq(3, N)


% Based on artificial inseminations being considered medically necessary from CPB 0327 section "Artificial Inseminations"
medically_necessary_service(C) :-
    claim.service_type(C, intrauterine_insemination)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

requires_precertification(ServiceType) :-
    is_comprehensive_infertility_service(ServiceType)

is_comprehensive_infertility_service(ovulation_induction_cycle_with_menotropins)
is_comprehensive_infertility_service(intrauterine_insemination)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Note: later encodings will compute these from other claims, but right now we're only doing one claim at a time
% Maximum six covered attempts at IUI in a policy year (between September 1 2023 and August 31 2024, in this case)
beyond_limits(Claim) :-
    claim.service_type(Claim, intrauterine_insemination) &
    claim.num_other_covered_artificial_insemination_attempts(Claim, N) &
    leq(6, N)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In respective rule files

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% get_timestamp_from_date is used either directly or indirectly in all treatment of infertility coverages
get_timestamp_from_date(DATE,STAMP) :-
  evaluate(parsedate(DATE),[Y,M,D]) &
  evaluate(maketimestamp(Y,M,D,0,0,0),STAMP)
%% General definition of infertility

% Female without a male partner
patient_is_infertile(C) :-
    claim.patient_has_female_reproductive_organs(C, yes) &
    claim.patient_has_partner_with_male_reproductive_organs(C, no) &
    patient_age_at_time_of_service(C, Age) &
    meets_attempt_to_conceive_reqs_female_without_male_partner(C, Age)

% Under 35
meets_attempt_to_conceive_reqs_female_without_male_partner(C, PersonAge) :-
    less(PersonAge, 35) &
    claim.num_cycles_donor_insemination(C, NumCycles) &
    leq(12, NumCycles)

% 35 and over
meets_attempt_to_conceive_reqs_female_without_male_partner(C, PersonAge) :-
    leq(35, PersonAge) &
    claim.num_cycles_donor_insemination(C, NumCycles) &
    leq(6, NumCycles)


% Female with a male partner
patient_is_infertile(C) :-
    claim.patient_has_female_reproductive_organs(C, yes) &
    claim.patient_has_partner_with_male_reproductive_organs(C, yes) &
    patient_age_at_time_of_service(C, Age) &
    meets_attempt_to_conceive_reqs_female_with_male_partner(C, Age)


% Under 35
meets_attempt_to_conceive_reqs_female_with_male_partner(C, PersonAge) :-
    less(PersonAge, 35) &
    claim.num_months_unprotected_intercourse(C, NumMonths) &
    leq(12, NumMonths)

% 35 or over
meets_attempt_to_conceive_reqs_female_with_male_partner(C, PersonAge) :-
    leq(35, PersonAge) &
    claim.num_months_unprotected_intercourse(C, NumMonths) &
    leq(6, NumMonths)

% Can also have tried donor insemination
meets_attempt_to_conceive_reqs_female_with_male_partner(C, PersonAge) :-
    meets_attempt_to_conceive_reqs_female_without_male_partner(C, PersonAge)


% Male with a female partner
patient_is_infertile(C) :-
    claim.patient_has_male_reproductive_organs(C, yes) &
    claim.patient_has_partner_with_female_reproductive_organs(C, yes) &
    claim.age_of_patients_female_partner(C, PartnerAge) & 
    meets_attempt_to_conceive_reqs_male_with_female_partner(C, PartnerAge)

% Female partner under 35
meets_attempt_to_conceive_reqs_male_with_female_partner(C, PartnerAge) :-
    less(PartnerAge, 35) &
    claim.num_months_unprotected_intercourse(C, NumMonths) &
    leq(12, NumMonths)

% Female partner 35 or over
meets_attempt_to_conceive_reqs_male_with_female_partner(C, PartnerAge) :-
    leq(35, PartnerAge) &
    claim.num_months_unprotected_intercourse(C, NumMonths) &
    leq(6, NumMonths)


% Male without a female partner
% Bug Note: This is actually buggy because the policy would care about dates, not solar/sidereal time - should use a real datetime module for computing difference of two weeks
patient_is_infertile(C) :-
    claim.patient_has_male_reproductive_organs(C, yes) &
    claim.patient_has_partner_with_female_reproductive_organs(C, no) &
    claim.abnormal_semen_analysis_on_date(C, abnormal_semen_analysis(_, Date1)) &
    claim.abnormal_semen_analysis_on_date(C, abnormal_semen_analysis(_, Date2)) & 
    get_timestamp_from_date(Date1, TS1) &
    get_timestamp_from_date(Date2, TS2) &
    evaluate(minus(TS2,TS1), TimeDiff) &
    evaluate(times(14, 24, 60, 60, 1000), NUM_MS_IN_TWO_WEEKS) &
    leq(NUM_MS_IN_TWO_WEEKS, TimeDiff)
    

% Person with gender dysphoria
patient_is_infertile(C) :-
    claim.patient_diagnosed_with_gender_dysphoria(C, yes)
% If multiple tests have the same datetime, then we can't decide which was most recent and this is not satisfied.
most_recent_day_3_fsh_test(C, fsh_test(Index, Level, Date, Time)) :-
    claim.day_3_fsh_test(C, fsh_test(Index, Level, Date, Time)) &
    countofall(T, claim.day_3_fsh_test(C, fsh_test(T, _, Date2, Time2)) & distinct(Index, T) & leq_datetime(Date, Time, Date2, Time2), 0)

% Gets day 3 fsh tests that have been performed since the patient became 40 years old
claim.day_3_fsh_test_after_age_40(C, fsh_test(Index, Level, Date, Time)) :-
    claim.patient_dob(C, DOB) &
    evaluate(parsedate(DOB), [Y, M, D]) &
    evaluate(maketimestamp(plus(Y, 40), M, D, 0, 0, 0), FortiethBirthdayTS) &
    claim.day_3_fsh_test(C, fsh_test(Index, Level, Date, Time)) &
    datetimetotimestamp(Date, Time, TestTS) &
    leq(FortiethBirthdayTS, TestTS)

leq_datetime(Date1, Time1, Date2, Time2) :-
    datetimetotimestamp(Date1, Time1, TS1) &
    datetimetotimestamp(Date2, Time2, TS2) & 
    leq(TS1, TS2)
% covers(Policy, C) :-
%     policy.type(Policy, aetna_cardinal_care_2023_2024) &
%     covered_under_policy(C, Policy, aetna_cardinal_care_2023_2024)


%covered_under_policy(C, Policy, aetna_cardinal_care_2023_2024) :-
covered(C) :-
    % policy_in_effect(C, Policy) &
    service_received_at_valid_provider(C) &
    meets_additional_eligibility_requirements_if_present(C) &
    medically_necessary_service(C) &
    precertified_if_necessary(C) &
    ~beyond_limits(C) &
    claim.exclusions(C, nil)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Policy in effect
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: Does not currently capture conditions on withdrawal/leaves of absence, coverage on another Stanford-offered plan, or special extensions on coverage dates

% Whether the policy was in effect when the service was received
% policy_in_effect(C, Policy) :-
%     claim.patient(C, Patient) &
%     claim.waived_cardinal_care(C, no) &
%     policy_in_effect_for_claim(Policy, C)


% Student enrolled in Autumn 2024
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, autumn_quarter_2024) &
%     date_between_dates_incl(ServiceDate, 2024_09_01, 2025_08_31)


% Student enrolled in Winter 2025
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, winter_quarter_2025) &
%     date_between_dates_incl(ServiceDate, 2025_01_01, 2025_08_31)

% Student enrolled in Spring 2025
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, spring_quarter_2025) &
%     date_between_dates_incl(ServiceDate, 2025_04_01, 2025_08_31)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Received from a valid provider
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: Encoding does not currently capture the cases where treatment began out-of-network before the policy began, or when the care is emergency or urgent care and received from an out-of-network provider

service_received_at_valid_provider(C) :-
    claim.location_service_received(C, Location) &
    member(Location, [
        stanford_health_care,
        menlo_medical_clinic,
        sutter_health_palo_alto_medical_foundation,
        tier_two_in_network
    ])

service_received_at_valid_provider(C) :-
    claim.location_service_received(C, other) &
    claim.service_available_at_tier_one_or_two_location(C, no)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

meets_additional_eligibility_requirements_if_present(C) :-
    covered_under_cardinal_care_24_25_benefit(C, B)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

medically_necessary_service(C) :-
    claim.service_type(C, ServiceType) &
    is_preventive_care_service(ServiceType)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
precertified_if_necessary(C) :-
    claim.service_type(C, ServiceType) &
    requires_precertification(ServiceType) & 
    claim.precertification_received(C, yes)

precertified_if_necessary(C) :-
    claim.service_type(C, ServiceType) &
    ~requires_precertification(ServiceType)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Important Note: Loaded from other, benefit-specific rulesets
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% General exclusions 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Important Note: Formerly loaded from exclusion.hrf. Now encoded in world.hdf.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

patient_age_at_time_of_service(Claim, Age) :-
    claim.patient_dob(Claim, PatientDOB) &
    claim.date_service_received(Claim, ServiceDate) &
    patient_age_on_date(PatientDOB, ServiceDate, Age)

patient_age_on_date(PatientDOB, Date, Age) :-
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(PatientDOB),[PatientDOBYear,PatientDOBMonth,PatientDOBDay]) &
    evaluate(minus(Year,PatientDOBYear), YearDiff) &
    not_yet_birthday_delta(Month,Day, PatientDOBMonth, PatientDOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)

age_at_time_of_service(Claim, Person, Age) :-
    claim.date_service_received(Claim, ServiceDate) &
    age_on_date(Person, ServiceDate, Age)

age_on_date(Person, Date, Age) :-
    person.dob(Person, DOB) &
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(DOB),[DOBYear,DOBMonth,DOBDay]) &
    evaluate(minus(Year,DOBYear), YearDiff) &
    not_yet_birthday_delta(Month,Day, DOBMonth, DOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)


not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    less(Month, DOBMonth)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    same(Month, DOBMonth) &
    less(Day, DOBDay)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, 0) :-
    less(DOBMonth, Month)

not_yet_birthday_delta(Month, Day, FOBMonth, DOBDay, 0) :-
    same(Month, DOBMonth) &
    leq(DOBDay, Day)


date_between_dates_incl(Date, BeginDateRange, EndDateRange) :-
    symleq(BeginDateRange, Date) &
    symleq(Date, EndDateRange)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% general definitions and predefined relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

claim.birthdate(C,D) :- claim.patient(C,P) & person.dob(P,D)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

overlap(XS,XE,YS,YE) :-
  evaluate(stringmin(YS,XE),YS) &
  evaluate(stringmin(XS,YE),XS)

datetimetotimestamp(DATE,TIME,STAMP) :-
  evaluate(parsedate(DATE),[Y,M,D]) &
  evaluate(parsetime(TIME),[H,N]) &
  evaluate(maketimestamp(Y,M,D,H,N,0),STAMP)

parsedate(DATE) :=
  map(readstring,tail(matches(stringify(DATE),"(....)_(..)_(..)")))

parsetime(TIME) :=
  map(readstring,tail(matches(stringify(TIME),"(..)_(..)")))

head(X!L) := X
tail(X!L) := L

less(X, Y) :- leq(X, Y) & distinct(X, Y)

%%% number relations, e.g. less, greater
%%% string relations, e.g. stringappend
%%% date relations, e.g. dateplus
%%% and so forth...

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
