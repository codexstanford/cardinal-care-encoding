infectious_disease_for_which_cdc_acip_recommends_immunization(influenza_disease)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Referenced in the superfolder benefit rules file

%% Influenza vaccine
% For ages >= 9 years, one dose annually (unless received first dose before turning 9, and needed multiple doses. That case is handled above.)
below_2024_cdc_acip_age_guideline_max_by_age(Age, Claim) :-
    leq(9, Age) &
    countofall(I, claim.2024_2025_influenza_vaccination(Claim, influenza_vaccination_event(I, _)), 0)

% For ages [6 months, 9 years), depends on number of doses received in prior seasons
below_2024_cdc_acip_age_guideline_max_by_age(Age, Claim) :-
    patient_geq_6_months_old_at_time_of_service(Claim) &
    less(Age, 9) &
    max_doses_flu_vaccine_allowed_for_child_6_months_through_9_years(Claim, MaxDoses) &
    countofall(I, claim.2024_2025_influenza_vaccination(Claim, influenza_vaccination_event(I, _)), ReceivedDoses) &
    less(ReceivedDoses, MaxDoses)

% If child aged 9 hasn't received any doses of 2024-2025 yet, then 1 is allowed
below_2024_cdc_acip_age_guideline_max_by_age(9, Claim) :-
    countofall(I, claim.2024_2025_influenza_vaccination(Claim, influenza_vaccination_event(I, _)), 0)

% If child aged 9 had received precisely one dose when they were 8 and they were allowed to receive two doses, then another is allowed
below_2024_cdc_acip_age_guideline_max_by_age(9, Claim) :-
    countofall(I, claim.2024_2025_influenza_vaccination(Claim, influenza_vaccination_event(I, _)), 1) &
    claim.2024_2025_influenza_vaccination(Claim, influenza_vaccination_event(_, VaccinationDate)) & 
    claim.patient_dob(Claim, PatientDOB) &
    patient_age_on_date(PatientDOB, VaccinationDate, 8) &
    max_doses_flu_vaccine_allowed_for_child_6_months_through_9_years(Claim, 2)
    
    % 1 dose if child had previously received >= 2 doses of tri- or quadrivalent flu vaccine >= 4 weeks apart before July 2024
    % 2 doses >= 4 weeks apart if not, or if child's vaccination history is unknown
max_doses_flu_vaccine_allowed_for_child_6_months_through_9_years(Claim, 1) :-
    claim.patient_had_received_at_least_two_doses_flu_vaccine_before_july_2024(Claim, yes)

% Intentional negation as failure, as this holds both when claim.patient_had_received_at_least_two_doses_flu_vaccine_before_july_2024 is unknown and when it is no
max_doses_flu_vaccine_allowed_for_child_6_months_through_9_years(Claim, 2) :-
    ~claim.patient_had_received_at_least_two_doses_flu_vaccine_before_july_2024(Claim, yes)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% Preventive Care Immunizations
covered_under_cardinal_care_24_25_benefit(C, preventive_care_immunizations_benefit) :-
    claim.service_type(C, preventive_care_immunization) &
    is_immunization_for_preventive_care(C) &
    % claim.immunization_for_disease(C, Disease) &
    infectious_disease_for_which_cdc_acip_recommends_immunization(Disease)

is_immunization_for_preventive_care(C) :-
    claim.reason_for_immunization(C, R) &
    member(R, [
        preventive_care,
        recommended_as_preventive_care
    ]) % Other options: required_for_employment, required_for_travel, other

% Note on policy wording interpretation: I am reading the policy as saying that the condition is on the CDC ACIP's recommendation as to which infectious diseases be vaccinated against, not which vaccines be used
% Important Note: Not strictly necessary to check infectious_disease_for_which_cdc_acip_recommends_immunization, since we're only specifying coverages for immunizations for which the CDC ACIP recommends immunization, and each immunization is now split out into its own coverage
    % But keeping it for now, since it's a relevant condition and I think it should be included in explanations.
    % The infectious_disease_for_which_cdc_acip_recommends_immunization relation is defined in the respective immunization coverage files
    % Removed the claim.immunization_for_disease subgoal from covered_under_cardinal_care_24_25_benefit since we don't need to specify it on a per-claim basis anymore

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% Preventive Care Immunizations
% Preventive care is a larger category of benefits, including female contracepives
% Note: CPB 0035 concerns Influenza Vaccines, but just points to the CDC ACIP guidelines
is_preventive_care_service(preventive_care_immunization)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% beyond_limits(Claim) :-
%     claim.service_type(Claim, preventive_care_immunization) &
%     claim.date_service_received(Claim, Date) &
%     date_between_dates_incl(Date, 2025_01_01, 2025_12_31) & 
%     ~below_2025_cdc_acip_age_guideline_max(Claim)


beyond_limits(Claim) :-
    claim.service_type(Claim, preventive_care_immunization) &
    claim.date_service_received(Claim, Date) &
    date_between_dates_incl(Date, 2024_01_01, 2024_12_31) & 
    ~below_2024_cdc_acip_age_guideline_max(Claim)

% beyond_limits(Claim) :-
%     claim.service_type(Claim, preventive_care_immunization) &
%     claim.date_service_received(Claim, Date) &
%     date_between_dates_incl(Date, 2023_01_01, 2023_12_31) & 
%     ~below_2023_cdc_acip_age_guideline_max(Claim)

%% CDC ACIP Guidelines
% below_2025_cdc_acip_age_guideline_max(C) :-
%   % claim.immunization_for_disease(C, D) & % Should remain commented out
%     claim.patient(C, P) &
%     age_at_time_of_service(C, P, A) &
%     below_2025_cdc_acip_age_guideline_max_by_age(A, C) % Definition specified in the respective immunization coverage file


below_2024_cdc_acip_age_guideline_max(C) :-
    % claim.immunization_for_disease(C, D) & % Should remain commented out
    patient_age_at_time_of_service(C, A) &
    below_2024_cdc_acip_age_guideline_max_by_age(A, C)

% Note: Only encoding 2024 and 2025 guidelines, since we won't be using 2023 guidelines in the final service if we don't make the 2023-2024 policy available
% below_2023_cdc_acip_age_guideline_max(Claim) :-
%     below_2024_cdc_acip_age_guideline_max(Claim)

%%% Disease-specific guidelines are in the respective immunization coverage files


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

patient_geq_6_months_old_at_time_of_service(Claim) :-
    claim.date_service_received(Claim, ServiceDate) &
    claim.patient_dob(Claim, PatientDOB) & 
    n_months_diff(PatientDOB, ServiceDate, N) &
    leq(6, N)

n_months_diff(EarlierDate, LaterDate, N) :-
    evaluate(parsedate(EarlierDate),[EY,EM,ED]) & 
    evaluate(parsedate(LaterDate),[LY,LM,LD]) &
    evaluate(times(minus(LY, EY), 12), MonthsFromYear) & 
    not_yet_day_of_month_delta(ED, LD, Delta) &
    evaluate(plus(MonthsFromYear, minus(LM, EM), Delta), N)

not_yet_day_of_month_delta(D1, D2, 0) :-
    leq(D1, D2)

not_yet_day_of_month_delta(D1, D2, -1) :-
    less(D2, D1)
% covers(Policy, C) :-
%     policy.type(Policy, aetna_cardinal_care_2023_2024) &
%     covered_under_policy(C, Policy, aetna_cardinal_care_2023_2024)


%covered_under_policy(C, Policy, aetna_cardinal_care_2023_2024) :-
covered(C) :-
    % policy_in_effect(C, Policy) &
    service_received_at_valid_provider(C) &
    meets_additional_eligibility_requirements_if_present(C) &
    medically_necessary_service(C) &
    precertified_if_necessary(C) &
    ~beyond_limits(C) &
    ~general_exclusion_applies(C)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Policy in effect
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: Does not currently capture conditions on withdrawal/leaves of absence, coverage on another Stanford-offered plan, or special extensions on coverage dates

% Whether the policy was in effect when the service was received
% policy_in_effect(C, Policy) :-
%     claim.patient(C, Patient) &
%     claim.waived_cardinal_care(C, no) &
%     policy_in_effect_for_claim(Policy, C)


% Student enrolled in Autumn 2024
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, autumn_quarter_2024) &
%     date_between_dates_incl(ServiceDate, 2024_09_01, 2025_08_31)


% Student enrolled in Winter 2025
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, winter_quarter_2025) &
%     date_between_dates_incl(ServiceDate, 2025_01_01, 2025_08_31)

% Student enrolled in Spring 2025
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, spring_quarter_2025) &
%     date_between_dates_incl(ServiceDate, 2025_04_01, 2025_08_31)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Received from a valid provider
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: Encoding does not currently capture the cases where treatment began out-of-network before the policy began, or when the care is emergency or urgent care and received from an out-of-network provider

service_received_at_valid_provider(C) :-
    claim.location_service_received(C, Location) &
    member(Location, [
        stanford_health_care,
        menlo_medical_clinic,
        sutter_health_palo_alto_medical_foundation,
        tier_two_in_network
    ])

service_received_at_valid_provider(C) :-
    claim.location_service_received(C, other) &
    claim.service_available_at_tier_one_or_two_location(C, no)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

meets_additional_eligibility_requirements_if_present(C) :-
    covered_under_cardinal_care_24_25_benefit(C, B)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

medically_necessary_service(C) :-
    claim.service_type(C, ServiceType) &
    is_preventive_care_service(ServiceType)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
precertified_if_necessary(C) :-
    claim.service_type(C, ServiceType) &
    requires_precertification(ServiceType) & 
    claim.precertification_received(C, yes)

precertified_if_necessary(C) :-
    claim.service_type(C, ServiceType) &
    ~requires_precertification(ServiceType)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Important Note: Loaded from other, benefit-specific rulesets
    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% General exclusions 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: only those applicable to the Treatment of Infertility benefits have been encoded so far

% Armed forces
general_exclusion_applies(C) :-
    claim.reception_of_service_or_supplies_resulted_from_service_in_armed_forces(C, yes)

% Beyond legal authority
general_exclusion_applies(C) :-
    claim.service_or_supplies_provided_by_provider_acting_beyond_scope_of_legal_authority(C, yes)

% Clinical trial therapies (experimental or investigational)
general_exclusion_applies(C) :-
    claim.service_is_clinical_trial_therapy_experimental_investigational(C, yes)


% Experimental or investigational - Not encoded right now, as this should be a function of the service selected and whether it meets certain requirements re: clinical trials for terminal etc. conditions
%general_exclusion_applies(C) :-
%    claim.service_is_experimental_investigational(C)

% Gene-based, cellular and other innovative therapies (GCIT)
% Not really applicable to infertility treatment, as it's primarily for life-threating conditions. Need to do a thorough check to be sure, though.
% general_exclusion_applies(C) :-

% Genetic care
general_exclusion_applies(C) :-
    claim.service_is_genetic_care(C, yes) &
    claim.service_for_correction_of_congenital_birth_defects(C, no)

% Incidental surgeries
% Note: Not encoding this now because it is implied by the fact that incidental surgeries are non-medically necessary
%general_exclusion_applies(C) :-
%    claim.service_is_incidental_surgery(C, yes)

% Judgment or settlement
general_exclusion_applies(C) :-
    claim.payment_for_service_made_for_judgment_settlement(C, yes)

% Non-U.S. citizen
% Note: if received as part of emergency services or urgent care, different conditions apply
% Note 2: Not encoded right now because this is implied by the in-network requirements of the policy
% general_exclusion_applies(C) :-

% Services provided by a family member
% Note: this should ultimately be inferrable from the provider and kinship relations
general_exclusion_applies(C) :-
    claim.service_provided_by_family_member(C, yes)

% Services, supplies and drugs received outside of the United States
% Note: the Aetna in-network locations should prohibit this from happening. Will encode this later, as a function of the country in which providers/facilities are located
%general_exclusion_applies(C) :-
%    claim.service_received_

% Treatment in a federal, state, or governmental entity
general_exclusion_applies(C) :-
    claim.treated_in_facility_owned_or_operated_by_governmental_entity(C, yes)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

patient_age_at_time_of_service(Claim, Age) :-
    claim.patient_dob(Claim, PatientDOB) &
    claim.date_service_received(Claim, ServiceDate) &
    patient_age_on_date(PatientDOB, ServiceDate, Age)

patient_age_on_date(PatientDOB, Date, Age) :-
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(PatientDOB),[PatientDOBYear,PatientDOBMonth,PatientDOBDay]) &
    evaluate(minus(Year,PatientDOBYear), YearDiff) &
    not_yet_birthday_delta(Month,Day, PatientDOBMonth, PatientDOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)

age_at_time_of_service(Claim, Person, Age) :-
    claim.date_service_received(Claim, ServiceDate) &
    age_on_date(Person, ServiceDate, Age)

age_on_date(Person, Date, Age) :-
    person.dob(Person, DOB) &
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(DOB),[DOBYear,DOBMonth,DOBDay]) &
    evaluate(minus(Year,DOBYear), YearDiff) &
    not_yet_birthday_delta(Month,Day, DOBMonth, DOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)


not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    less(Month, DOBMonth)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    same(Month, DOBMonth) &
    less(Day, DOBDay)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, 0) :-
    less(DOBMonth, Month)

not_yet_birthday_delta(Month, Day, FOBMonth, DOBDay, 0) :-
    same(Month, DOBMonth) &
    leq(DOBDay, Day)


date_between_dates_incl(Date, BeginDateRange, EndDateRange) :-
    symleq(BeginDateRange, Date) &
    symleq(Date, EndDateRange)


%%%% Redundant, because these are general rules that are loaded into each page
parsedate(DATE) :=
    map(readstring,tail(matches(stringify(DATE),"(....)_(..)_(..)")))

parsetime(TIME) :=
    map(readstring,tail(matches(stringify(TIME),"(..)_(..)_(..)")))

tail(X!L) := L

datetimetotimestamp(DATE,TIME,STAMP) :- 
    evaluate(parsedate(DATE),[Y,M,D]) & 
    evaluate(parsetime(TIME),[H,N,S]) & 
    evaluate(maketimestamp(Y,M,D,H,N,S),STAMP)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% general definitions and predefined relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

claim.birthdate(C,D) :- claim.patient(C,P) & person.dob(P,D)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

overlap(XS,XE,YS,YE) :-
  evaluate(stringmin(YS,XE),YS) &
  evaluate(stringmin(XS,YE),XS)

datetimetotimestamp(DATE,TIME,STAMP) :-
  evaluate(parsedate(DATE),[Y,M,D]) &
  evaluate(parsetime(TIME),[H,N]) &
  evaluate(maketimestamp(Y,M,D,H,N,0),STAMP)

parsedate(DATE) :=
  map(readstring,tail(matches(stringify(DATE),"(....)_(..)_(..)")))

parsetime(TIME) :=
  map(readstring,tail(matches(stringify(TIME),"(..)_(..)")))

head(X!L) := X
tail(X!L) := L

%%% number relations, e.g. less, greater
%%% string relations, e.g. stringappend
%%% date relations, e.g. dateplus
%%% and so forth...

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
