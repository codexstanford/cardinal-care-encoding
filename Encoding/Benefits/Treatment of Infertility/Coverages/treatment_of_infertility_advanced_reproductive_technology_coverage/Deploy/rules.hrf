%% Advanced reproductive technology services
covered_under_cardinal_care_24_25_benefit(C, treatment_of_infertility_benefit) :-
    claim.service_type(C, ServiceType) & 
    is_art_service(ServiceType) &
    meets_fertility_preservation_eligibility_requirements(C) &
    ~claim.location_service_received(C, other) % ART service-specific exclusion in the infertility treatment benefit. Not provided for out-of-network care.


meets_fertility_preservation_eligibility_requirements(C) :-
    claim.patient_is_believed_to_be_fertile(C, yes) &
    claim.planned_service(C, PlannedService) &
    member(PlannedService, [
        chemotherapy,
        pelvic_radiotherapy,
        gonadotoxic_therapy,
        orchiectomy,
        oophorectomy,
        hysterectomy,
        orchiectomy_for_treatment_of_disease,
        oophorectomy_for_treatment_of_disease,
        other_treatment_demonstrated_to_result_in_infertility
    ]) &
    patient_age_at_time_of_service(C, Age) &
    eggs_to_be_retrieved_meet_fsh_and_ovarian_responsiveness_criteria(C, Age)

% Vacuously satisfied if not retrieving eggs for use
eggs_to_be_retrieved_meet_fsh_and_ovarian_responsiveness_criteria(C, _) :-
    claim.will_be_retrieving_eggs_for_use(C, no)

% Source: Note 4 from CPB 0327 on 1/4/2025: https://www.aetna.com/cpb/medical/data/300_399/0327.html
% If under 40, just care about most recent test
eggs_to_be_retrieved_meet_fsh_and_ovarian_responsiveness_criteria(C, Age) :-
    claim.will_be_retrieving_eggs_for_use(C, yes) &
    less(Age, 40) &
    most_recent_day_3_fsh_test(C, fsh_test(Level, Date, Time)) &
    less(Level, 19) &
    meets_fsh_test_recency_req(C, fsh_test(Level, Date, Time))

% If 40 or over, care about all prior tests since became 40 (This is inferred from the "Comprehensive infertility services" FSH level reqs, the Note 4 text "Check benefit plan descriptions", and the Note 5 text "even if she has had an elevated D3 FSH level above 40 years of age in the past")
% But needs at least one within the last 6 months
% Another practical assumption: There must be at least one test after age 40
eggs_to_be_retrieved_meet_fsh_and_ovarian_responsiveness_criteria(C, Age) :-
    claim.will_be_retrieving_eggs_for_use(C, yes) &
    leq(40, Age) &
    day_3_fsh_tests_since_age_40_in_claim(C, Tests) &
    evaluate(length(Tests), NumTests) &
    leq(1, NumTests) &
    ~exists_test_with_level_at_least_19(Tests) &
    most_recent_day_3_fsh_test(C, fsh_test(Level, Date, Time)) &
    meets_fsh_test_recency_req(C, fsh_test(Level, Date, Time))

% Source: Note 5 from CPB 0327 on 1/4/2025: https://www.aetna.com/cpb/medical/data/300_399/0327.html
% Additional (more generous) eligibility requirements if a woman has premature ovarian failure
eggs_to_be_retrieved_meet_fsh_and_ovarian_responsiveness_criteria(C, Age) :-
    claim.will_be_retrieving_eggs_for_use(C, yes) &
    leq(40, Age) &
    claim.patient_has_premature_ovarian_failure(C, yes) &
    most_recent_day_3_fsh_test(C, fsh_test(Level, Date, Time)) &
    less(Level, 19) &
    meets_fsh_test_recency_req(C, fsh_test(Level, Date, Time))


% Source: Note 4 from CPB 0327 on 1/4/2025: https://www.aetna.com/cpb/medical/data/300_399/0327.html
% If 39 or over, test must be in the last six months
meets_fsh_test_recency_req(C, fsh_test(_, TestDate, TestTime)) :-
    patient_age_at_time_of_service(C, Age) &
    leq(39, Age) &
    claim.date_service_received(C, ServiceDate) &
    leq_n_months_diff(TestDate, ServiceDate, 6)

% If under 39, no recency requirement
meets_fsh_test_recency_req(C, _) :-
    patient_age_at_time_of_service(C, Age) &
    less(Age, 39)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Cryopreservation for fertility preservation %%%

% Almost redundant with list of valid services listed in the policy itself
% Is also more restrictive than the planned service constraint in the policy's eligibility reqs, even though the policy reqs are likely to be the ones honored here
% Doesn't have the requirements about appropriate trials of egg-sperm contact, because this is treatment for expected imminent infertility, rather than current infertility
medically_necessary_service(C) :-
    claim.service_type(C, cryopreservation_for_fertility_preservation) &
    claim.planned_service(C, PlannedService) &
    member(PlannedService, [
        chemotherapy,
        pelvic_radiotherapy,
        gonadotoxic_therapy,
        orchiectomy_for_treatment_of_disease,
        oophorectomy_for_treatment_of_disease
    ]) &
    younger_than_40_or_has_provided_evidence_not_menopausal(C)

% Source: Note 5 from CPB 0327 on 1/4/2025: https://www.aetna.com/cpb/medical/data/300_399/0327.html
% Applicable to all ART services
younger_than_40_or_has_provided_evidence_not_menopausal(C) :-
    patient_age_at_time_of_service(C, Age) &
    less(Age, 40)

younger_than_40_or_has_provided_evidence_not_menopausal(C) :-
    patient_age_at_time_of_service(C, Age) &
    leq(40, Age) &
    day_3_fsh_tests_since_age_40_in_claim(C, Tests) &
    evaluate(length(Tests), NumTests) &
    leq(1, NumTests) &
    ~exists_test_with_level_at_least_19(Tests)

%%% IVF for fertility preservation %%%

medically_necessary_service(C) :-
    claim.service_type(C, ivf_for_fertility_preservation) & 
    meets_ivf_cpb_reqs(C)

% Source: Note 5 from CPB 0327 on 1/4/2025: https://www.aetna.com/cpb/medical/data/300_399/0327.html
% All patients under 45 with premature ovarian failure meet medical necessity reqs for IVF
meets_ivf_cpb_reqs(C) :-
    claim.patient_has_premature_ovarian_failure(C, yes) &
    patient_age_at_time_of_service(C, Age) &
    less(Age, 45)

% Source: E.3.b and Notes 2 and 5 from CPB 0327 on 1/4/2025: https://www.aetna.com/cpb/medical/data/300_399/0327.html
% Otherwise, must have undergone an appropriate trial of less invasive prior treatment, and provide evidence that they are not menopausal if they are 40 or older
meets_ivf_cpb_reqs(C) :-
    meets_less_invasive_prior_treatment_reqs(C) &
    younger_than_40_or_has_provided_evidence_not_menopausal(C)

% Source: E.3.a, E.3.b and Note 2 from CPB 0327 on 1/4/2025: https://www.aetna.com/cpb/medical/data/300_399/0327.html
% Rounds of less invasive prior treatment are not necessary if only IVF expected to be effective
% Note: They list some examples of such individuals, but don't seem to be comprehensive
meets_less_invasive_prior_treatment_reqs(C) :-
    claim.inseminations_not_expected_to_be_effective_and_ivf_expected_to_be_only_effective_treatment(C, yes)

meets_less_invasive_prior_treatment_reqs(C) :-
    meets_cpb_egg_sperm_contact_trial_reqs(C) &
    meets_ovulation_induction_trial_reqs(C)

% Three cycles if under 38, none necessary if 38 or over
meets_ovulation_induction_trial_reqs(C) :-
    patient_age_at_time_of_service(C, Age) &
    less(Age, 38) &
    claim.num_cycles_oral_or_injectable_ovulation_induction(C, N) &
    leq(3, N)

meets_ovulation_induction_trial_reqs(C) :-
    patient_age_at_time_of_service(C, Age) &
    leq(38, Age)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

requires_precertification(ServiceType) :-
    is_art_service(ServiceType)

is_art_service(ivf_for_fertility_preservation)
is_art_service(cryopreservation_for_fertility_preservation)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

beyond_limits(Claim) :-
    claim.service_type(Claim, ServiceType) &
    is_art_service(ServiceType) &
    claim.num_other_covered_art_services(Claim, N) &
    leq(1, N)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In respective rule files

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% get_timestamp_from_date is used either directly or indirectly in all treatment of infertility coverages
get_timestamp_from_date(DATE,STAMP) :-
  evaluate(parsedate(DATE),[Y,M,D]) &
  evaluate(maketimestamp(Y,M,D,0,0,0),STAMP)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
precertified_if_necessary(C) :-
    claim.service_type(C, ServiceType) &
    requires_precertification(ServiceType) & 
    claim.precertification_received(C, yes)
%%% Egg-sperm contact requirements %%% 

% For ages under 35
meets_cpb_egg_sperm_contact_trial_reqs(C) :-
    patient_age_at_time_of_service(C, Age) &
    less(Age, 35) &
    meets_cpb_egg_sperm_contact_trial_reqs_under_35(C)

meets_cpb_egg_sperm_contact_trial_reqs_under_35(C) :-
    claim.num_months_frequent_unprotected_heterosexual_intercourse(C, N) &
    leq(12, N)

meets_cpb_egg_sperm_contact_trial_reqs_under_35(C) :-
    claim.num_cycles_timed_intrauterine_intracervical_inseminations(C, N) &
    leq(4, N)

% For ages 35 and over
meets_cpb_egg_sperm_contact_trial_reqs(C) :-
    patient_age_at_time_of_service(C, Age) &
    leq(35, Age) &
    meets_cpb_egg_sperm_contact_trial_reqs_35_and_over(C)

meets_cpb_egg_sperm_contact_trial_reqs_35_and_over(C) :-
    claim.num_months_frequent_unprotected_heterosexual_intercourse(C, N) &
    leq(6, N)

meets_cpb_egg_sperm_contact_trial_reqs_35_and_over(C) :-
    claim.num_cycles_timed_intrauterine_intracervical_inseminations(C, N) &
    leq(3, N)



%%% FSH Test handling %%%
% If multiple tests have the same date and time, then we can't decide which was most recent and this is not satisfied.
most_recent_day_3_fsh_test(C, fsh_test(Level, Date, Time)) :-
    claim.day_3_fsh_tests(C, Tests) &
    choose_1_with_index_from_list(Tests, fsh_test(Level, Date, Time), I1) &
    countofall(I2, choose_1_with_index_from_list(Tests, fsh_test(_, Date2, Time2), I2) & distinct(I1, I2) & leq_datetime(Date, Time, Date2, Time2), 0)

% Gets day 3 fsh tests that have been performed since the patient became 40 years old
day_3_fsh_tests_since_age_40_in_claim(C, Tests) :-
    claim.patient_dob(C, DOB) &
    evaluate(parsedate(DOB), [Y, M, D]) &
    evaluate(maketimestamp(plus(Y, 40), M, D, 0, 0, 0), FortiethBirthdayTS) &
    claim.day_3_fsh_tests(C, AllTests) &
    get_all_tests_since_timestamp(FortiethBirthdayTS, AllTests, Tests)

get_all_tests_since_timestamp(_, [], [])
get_all_tests_since_timestamp(TS, fsh_test(Level, Date, Time)!T, fsh_test(Level, Date, Time)!Rest) :-
    datetimetotimestamp(Date, Time, TestTS) &
    leq(TS, TestTS) &
    get_all_tests_since_timestamp(TS, T, Rest)

get_all_tests_since_timestamp(TS, fsh_test(Level, Date, Time)!T, Rest) :-
    datetimetotimestamp(Date, Time, TestTS) &
    ~leq(TS, TestTS) &
    get_all_tests_since_timestamp(TS, T, Rest)


exists_test_with_level_at_least_19(Tests) :-
    member(fsh_test(Level, _, _), Tests) &
    leq(19, Level)

leq_datetime(Date1, Time1, Date2, Time2) :-
    datetimetotimestamp(Date1, Time1, TS1) &
    datetimetotimestamp(Date2, Time2, TS2) & 
    leq(TS1, TS2)
% covers(Policy, C) :-
%     policy.type(Policy, aetna_cardinal_care_2023_2024) &
%     covered_under_policy(C, Policy, aetna_cardinal_care_2023_2024)


%covered_under_policy(C, Policy, aetna_cardinal_care_2023_2024) :-
covered(C) :-
    % policy_in_effect(C, Policy) &
    service_received_at_valid_provider(C) &
    meets_additional_eligibility_requirements_if_present(C) &
    medically_necessary_service(C) &
    precertified_if_necessary(C) &
    ~beyond_limits(C) &
    claim.exclusions(C, nil)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Policy in effect
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: Does not currently capture conditions on withdrawal/leaves of absence, coverage on another Stanford-offered plan, or special extensions on coverage dates

% Whether the policy was in effect when the service was received
% policy_in_effect(C, Policy) :-
%     claim.patient(C, Patient) &
%     claim.waived_cardinal_care(C, no) &
%     policy_in_effect_for_claim(Policy, C)


% Student enrolled in Autumn 2024
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, autumn_quarter_2024) &
%     date_between_dates_incl(ServiceDate, 2024_09_01, 2025_08_31)


% Student enrolled in Winter 2025
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, winter_quarter_2025) &
%     date_between_dates_incl(ServiceDate, 2025_01_01, 2025_08_31)

% Student enrolled in Spring 2025
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, spring_quarter_2025) &
%     date_between_dates_incl(ServiceDate, 2025_04_01, 2025_08_31)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Received from a valid provider
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: Encoding does not currently capture the cases where treatment began out-of-network before the policy began, or when the care is emergency or urgent care and received from an out-of-network provider

service_received_at_valid_provider(C) :-
    claim.location_service_received(C, Location) &
    member(Location, [
        stanford_health_care,
        menlo_medical_clinic,
        sutter_health_palo_alto_medical_foundation,
        tier_two_in_network
    ])

service_received_at_valid_provider(C) :-
    claim.location_service_received(C, other) &
    claim.service_available_at_tier_one_or_two_location(C, no)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

meets_additional_eligibility_requirements_if_present(C) :-
    covered_under_cardinal_care_24_25_benefit(C, B)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% Preventive care services are always medically necessary, but we don't want users to have to specify the service type when there is only one option
%%%%% So in e.g. immunization coverages, we infer medical necessity from the type of the claim object
medically_necessary_service(C) :-
    claim.service_type(C, ServiceType) &
    is_preventive_care_service(ServiceType)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% If the service does not require precertification, then it is "precertified_if_necessary". 
% However, developers should be aware of precertification requirements for the services for which they're encoding coverage.
% So if precertification is not required, then the developer should add an additional precertified_if_necessary rule to their coverage.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Important Note: Loaded from other, benefit-specific rulesets
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% General exclusions 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Important Note: Formerly loaded from exclusion.hrf. Now encoded in world.hdf.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

patient_age_at_time_of_service(Claim, Age) :-
    claim.patient_dob(Claim, PatientDOB) &
    claim.date_service_received(Claim, ServiceDate) &
    patient_age_on_date(PatientDOB, ServiceDate, Age)

patient_age_on_date(PatientDOB, Date, Age) :-
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(PatientDOB),[PatientDOBYear,PatientDOBMonth,PatientDOBDay]) &
    evaluate(minus(Year,PatientDOBYear), YearDiff) &
    not_yet_birthday_delta(Month,Day, PatientDOBMonth, PatientDOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)

age_at_time_of_service(Claim, Person, Age) :-
    claim.date_service_received(Claim, ServiceDate) &
    age_on_date(Person, ServiceDate, Age)

age_on_date(Person, Date, Age) :-
    person.dob(Person, DOB) &
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(DOB),[DOBYear,DOBMonth,DOBDay]) &
    evaluate(minus(Year,DOBYear), YearDiff) &
    not_yet_birthday_delta(Month,Day, DOBMonth, DOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)


not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    less(Month, DOBMonth)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    same(Month, DOBMonth) &
    less(Day, DOBDay)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, 0) :-
    less(DOBMonth, Month)

not_yet_birthday_delta(Month, Day, FOBMonth, DOBDay, 0) :-
    same(Month, DOBMonth) &
    leq(DOBDay, Day)


date_between_dates_incl(Date, BeginDateRange, EndDateRange) :-
    symleq(BeginDateRange, Date) &
    symleq(Date, EndDateRange)

leq_n_months_diff(EarlierDate, LaterDate, N) :-
    n_months_diff(EarlierDate, LaterDate, Diff) &
    less(Diff, N)

leq_n_months_diff(EarlierDate, LaterDate, N) :-
    n_months_diff(EarlierDate, LaterDate, N) &
    evaluate(parsedate(EarlierDate),[_,_,SameDay]) & 
    evaluate(parsedate(LaterDate),[_,_,SameDay])

n_months_diff(EarlierDate, LaterDate, N) :-
    evaluate(parsedate(EarlierDate),[EY,EM,ED]) & 
    evaluate(parsedate(LaterDate),[LY,LM,LD]) &
    evaluate(times(minus(LY, EY), 12), MonthsFromYear) & 
    not_yet_day_of_month_delta(ED, LD, Delta) &
    evaluate(plus(MonthsFromYear, minus(LM, EM), Delta), N)

not_yet_day_of_month_delta(D1, D2, 0) :-
    leq(D1, D2)

not_yet_day_of_month_delta(D1, D2, -1) :-
    less(D2, D1)

%%%%% Relations to faciliate choosing elements from lists that may have repeats

% Generates all pairs (unordered) of elements from a list, counting identical elements at different positions as distinct
choose_2_with_indices_from_list_no_repeats(L, E1, I1, E2, I2) :-
    choose_2_with_indices_from_sublist_no_repeats(0, L, E1, I1, E2, I2)


% Case 1: The first element is the head
choose_2_with_indices_from_sublist_no_repeats(NumBefore, H!T, H, NumBefore, E2, I2) :-
    evaluate(plus(NumBefore, 1), NewNumBefore) &
    choose_1_with_index_from_sublist(NewNumBefore, T, E2, I2)

% Case 2: The first element is in the tail
choose_2_with_indices_from_sublist_no_repeats(NumBefore, H!T, E1, I1, E2, I2) :-
    evaluate(plus(NumBefore, 1), NewNumBefore) &
    choose_2_with_indices_from_sublist_no_repeats(NewNumBefore, T, E1, I1, E2, I2)


% Entry point
choose_1_with_index_from_list(L, E, I) :-
    choose_1_with_index_from_sublist(0, L, E, I)

% Case 1: The element is the head
choose_1_with_index_from_sublist(NumBefore, H!T, H, NumBefore)

% Case 2: The element is in the tail
choose_1_with_index_from_sublist(NumBefore, H!T, E, I) :-
    evaluate(plus(NumBefore, 1), NewNumBefore) &
    choose_1_with_index_from_sublist(NewNumBefore, T, E, I)
