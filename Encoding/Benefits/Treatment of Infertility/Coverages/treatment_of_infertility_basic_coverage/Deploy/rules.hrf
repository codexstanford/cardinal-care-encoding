%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%% Treatment of Infertility
%%%% Important question: how do we want to handle the explicit exclusions that don't actually apply to anything that is covered by the policy? E.g. page 65 of the Certificate of Coverage

%% Basic infertility services
covered_under_cardinal_care_24_25_benefit(C, treatment_of_infertility_benefit) :-
    claim.service_type(C, ServiceType) & 
    is_basic_infertility_service(ServiceType) &
    patient_is_infertile(C)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

medically_necessary_service(C) :-
    claim.service_type(C, diagnose_and_evaluate_underlying_medical_cause_of_infertility)

medically_necessary_service(C) :-
    claim.service_type(C, surgery_to_treat_underlying_medical_cause_of_infertility)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Not necessary for basic infertility services
precertified_if_necessary(C) :-
    claim.service_type(C, ServiceType) &
    is_basic_infertility_service(ServiceType)

is_basic_infertility_service(diagnose_and_evaluate_underlying_medical_cause_of_infertility)
is_basic_infertility_service(surgery_to_treat_underlying_medical_cause_of_infertility)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% No limitations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In respective rule files

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% In respective rule files


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% get_timestamp_from_date is used either directly or indirectly in all treatment of infertility coverages
get_timestamp_from_date(DATE,STAMP) :-
  evaluate(parsedate(DATE),[Y,M,D]) &
  evaluate(maketimestamp(Y,M,D,0,0,0),STAMP)
%%% General definition of infertility from 2023-2024 Certificate of Coverage Glossary %%%

%% Female with a male partner %%
% Under 35
patient_is_infertile(C) :-
    claim.sex_of_patient_trying_to_conceive(C, female) &
    claim.sex_of_patients_partner(C, male) &
    patient_age_at_time_of_service(C, Age) &
    less(Age, 35) &
    claim.num_months_frequent_unprotected_heterosexual_intercourse(C, N) &
    leq(12, N)

% 35 or over
patient_is_infertile(C) :-
    claim.sex_of_patient_trying_to_conceive(C, female) &
    claim.sex_of_patients_partner(C, male) &
    patient_age_at_time_of_service(C, Age) &
    leq(35, Age) &
    claim.num_months_frequent_unprotected_heterosexual_intercourse(C, N) &
    leq(6, N)

%% Female without a male partner %%
% Under 35
patient_is_infertile(C) :-
    claim.sex_of_patient_trying_to_conceive(C, female) &
    ~claim.sex_of_patients_partner(C, male) &
    patient_age_at_time_of_service(C, Age) &
    less(Age, 35) &
    claim.num_cycles_donor_insemination(C, N) &
    leq(12, N)

% 35 or over
patient_is_infertile(C) :-
    claim.sex_of_patient_trying_to_conceive(C, female) &
    ~claim.sex_of_patients_partner(C, male) &
    patient_age_at_time_of_service(C, Age) &
    leq(35, Age) &
    claim.num_cycles_donor_insemination(C, N) &
    leq(6, N)


%% Male without a female partner %%
patient_is_infertile(C) :-
    claim.sex_of_patient_trying_to_conceive(C, male) &
    ~claim.sex_of_patients_partner(C, female) &
    abnormal_semen_analyses_in_claim_at_least_two_weeks_apart(C)

%% Male with a female partner %%

% NOT ACTUALLY MENTIONED IN THE GLOSSARY, but we're assuming Aetna allows for the possibility that a male with a female partner can be infertile %
% To be conservative, using the female with a male partner requirements applied to the female partner, and the requirements for the male without a female partner applied to the male patient

% Patient's partner is under 35
patient_is_infertile(C) :-
    claim.sex_of_patient_trying_to_conceive(C, male) &
    claim.sex_of_patients_partner(C, female) &
    claim.age_of_patients_female_partner(C, PartnerAge) &
    less(PartnerAge, 35) &
    claim.num_months_frequent_unprotected_heterosexual_intercourse(C, N) &
    leq(12, N) &
    abnormal_semen_analyses_in_claim_at_least_two_weeks_apart(C)

% Patient's partner is 35 or over
patient_is_infertile(C) :-
    claim.sex_of_patient_trying_to_conceive(C, male) &
    claim.sex_of_patients_partner(C, female) &
    claim.age_of_patients_female_partner(C, PartnerAge) &
    leq(35, PartnerAge) &
    claim.num_months_frequent_unprotected_heterosexual_intercourse(C, N) &
    leq(6, N) &
    abnormal_semen_analyses_in_claim_at_least_two_weeks_apart(C)

% Helper relation for male infertility %
% Bug Note: This is actually buggy because the policy would care about dates, not solar/sidereal time - should use a real datetime module for computing difference of two weeks
abnormal_semen_analyses_in_claim_at_least_two_weeks_apart(C) :-
    claim.abnormal_semen_analyses(C, Analyses) &
    choose_2_with_indices_from_list_no_repeats(Analyses, abnormal_semen_analysis(Date1), _, abnormal_semen_analysis(Date2), _) &
    get_timestamp_from_date(Date1, TS1) &
    get_timestamp_from_date(Date2, TS2) &
    evaluate(abs(minus(TS2,TS1)), TimeDiff) &
    evaluate(times(14, 24, 60, 60, 1000), NUM_MS_IN_TWO_WEEKS) &
    leq(NUM_MS_IN_TWO_WEEKS, TimeDiff)

%% Person with gender dysphoria %%
patient_is_infertile(C) :-
    claim.patient_or_partner_diagnosed_with_gender_dysphoria(C, yes)
% covers(Policy, C) :-
%     policy.type(Policy, aetna_cardinal_care_2023_2024) &
%     covered_under_policy(C, Policy, aetna_cardinal_care_2023_2024)


%covered_under_policy(C, Policy, aetna_cardinal_care_2023_2024) :-
covered(C) :-
    % policy_in_effect(C, Policy) &
    service_received_at_valid_provider(C) &
    meets_additional_eligibility_requirements_if_present(C) &
    medically_necessary_service(C) &
    precertified_if_necessary(C) &
    ~beyond_limits(C) &
    claim.exclusions(C, nil)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Policy in effect
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: Does not currently capture conditions on withdrawal/leaves of absence, coverage on another Stanford-offered plan, or special extensions on coverage dates

% Whether the policy was in effect when the service was received
% policy_in_effect(C, Policy) :-
%     claim.patient(C, Patient) &
%     claim.waived_cardinal_care(C, no) &
%     policy_in_effect_for_claim(Policy, C)


% Student enrolled in Autumn 2024
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, autumn_quarter_2024) &
%     date_between_dates_incl(ServiceDate, 2024_09_01, 2025_08_31)


% Student enrolled in Winter 2025
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, winter_quarter_2025) &
%     date_between_dates_incl(ServiceDate, 2025_01_01, 2025_08_31)

% Student enrolled in Spring 2025
% policy_in_effect_for_claim(Policy, Claim) :-
%     claim.date_service_received(Claim, ServiceDate) &
%     claim.quarter_enrolled_stanford_2024_2025(Claim, spring_quarter_2025) &
%     date_between_dates_incl(ServiceDate, 2025_04_01, 2025_08_31)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Received from a valid provider
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: Encoding does not currently capture the cases where treatment began out-of-network before the policy began, or when the care is emergency or urgent care and received from an out-of-network provider

service_received_at_valid_provider(C) :-
    claim.location_service_received(C, Location) &
    member(Location, [
        stanford_health_care,
        menlo_medical_clinic,
        sutter_health_palo_alto_medical_foundation,
        tier_two_in_network
    ])

service_received_at_valid_provider(C) :-
    claim.location_service_received(C, other) &
    claim.service_available_at_tier_one_or_two_location(C, no)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

meets_additional_eligibility_requirements_if_present(C) :-
    covered_under_cardinal_care_24_25_benefit(C, B)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% Preventive care services are always medically necessary, but we don't want users to have to specify the service type when there is only one option
%%%%% So in e.g. immunization coverages, we infer medical necessity from the type of the claim object
medically_necessary_service(C) :-
    claim.service_type(C, ServiceType) &
    is_preventive_care_service(ServiceType)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% If the service does not require precertification, then it is "precertified_if_necessary". 
% However, developers should be aware of precertification requirements for the services for which they're encoding coverage.
% So if precertification is not required, then the developer should add an additional precertified_if_necessary rule to their coverage.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Important Note: Loaded from other, benefit-specific rulesets
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% General exclusions 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Important Note: Formerly loaded from exclusion.hrf. Now encoded in world.hdf.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

patient_age_at_time_of_service(Claim, Age) :-
    claim.patient_dob(Claim, PatientDOB) &
    claim.date_service_received(Claim, ServiceDate) &
    patient_age_on_date(PatientDOB, ServiceDate, Age)

patient_age_on_date(PatientDOB, Date, Age) :-
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(PatientDOB),[PatientDOBYear,PatientDOBMonth,PatientDOBDay]) &
    evaluate(minus(Year,PatientDOBYear), YearDiff) &
    not_yet_birthday_delta(Month,Day, PatientDOBMonth, PatientDOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)

age_at_time_of_service(Claim, Person, Age) :-
    claim.date_service_received(Claim, ServiceDate) &
    age_on_date(Person, ServiceDate, Age)

age_on_date(Person, Date, Age) :-
    person.dob(Person, DOB) &
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(DOB),[DOBYear,DOBMonth,DOBDay]) &
    evaluate(minus(Year,DOBYear), YearDiff) &
    not_yet_birthday_delta(Month,Day, DOBMonth, DOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)


not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    less(Month, DOBMonth)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    same(Month, DOBMonth) &
    less(Day, DOBDay)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, 0) :-
    less(DOBMonth, Month)

not_yet_birthday_delta(Month, Day, FOBMonth, DOBDay, 0) :-
    same(Month, DOBMonth) &
    leq(DOBDay, Day)


date_between_dates_incl(Date, BeginDateRange, EndDateRange) :-
    symleq(BeginDateRange, Date) &
    symleq(Date, EndDateRange)

leq_n_months_diff(EarlierDate, LaterDate, N) :-
    n_months_diff(EarlierDate, LaterDate, Diff) &
    less(Diff, N)

leq_n_months_diff(EarlierDate, LaterDate, N) :-
    n_months_diff(EarlierDate, LaterDate, N) &
    evaluate(parsedate(EarlierDate),[_,_,SameDay]) & 
    evaluate(parsedate(LaterDate),[_,_,SameDay])

n_months_diff(EarlierDate, LaterDate, N) :-
    evaluate(parsedate(EarlierDate),[EY,EM,ED]) & 
    evaluate(parsedate(LaterDate),[LY,LM,LD]) &
    evaluate(times(minus(LY, EY), 12), MonthsFromYear) & 
    not_yet_day_of_month_delta(ED, LD, Delta) &
    evaluate(plus(MonthsFromYear, minus(LM, EM), Delta), N)

not_yet_day_of_month_delta(D1, D2, 0) :-
    leq(D1, D2)

not_yet_day_of_month_delta(D1, D2, -1) :-
    less(D2, D1)

%%%%% Relations to faciliate choosing elements from lists that may have repeats

% Generates all pairs (unordered) of elements from a list, counting identical elements at different positions as distinct
choose_2_with_indices_from_list_no_repeats(L, E1, I1, E2, I2) :-
    choose_2_with_indices_from_sublist_no_repeats(0, L, E1, I1, E2, I2)


% Case 1: The first element is the head
choose_2_with_indices_from_sublist_no_repeats(NumBefore, H!T, H, NumBefore, E2, I2) :-
    evaluate(plus(NumBefore, 1), NewNumBefore) &
    choose_1_with_index_from_sublist(NewNumBefore, T, E2, I2)

% Case 2: The first element is in the tail
choose_2_with_indices_from_sublist_no_repeats(NumBefore, H!T, E1, I1, E2, I2) :-
    evaluate(plus(NumBefore, 1), NewNumBefore) &
    choose_2_with_indices_from_sublist_no_repeats(NewNumBefore, T, E1, I1, E2, I2)


% Entry point
choose_1_with_index_from_list(L, E, I) :-
    choose_1_with_index_from_sublist(0, L, E, I)

% Case 1: The element is the head
choose_1_with_index_from_sublist(NumBefore, H!T, H, NumBefore)

% Case 2: The element is in the tail
choose_1_with_index_from_sublist(NumBefore, H!T, E, I) :-
    evaluate(plus(NumBefore, 1), NewNumBefore) &
    choose_1_with_index_from_sublist(NewNumBefore, T, E, I)
