covers(Policy, C) :-
    policy.type(Policy, aetna_cardinal_care_2023_2024) &
    covered_under_policy(C, Policy, aetna_cardinal_care_2023_2024)


covered_under_policy(C, Policy, aetna_cardinal_care_2023_2024) :-
    policy_in_effect(C, Policy) &
    service_received_at_valid_provider(C, Policy) &
    meets_additional_eligibility_requirements_if_present(C) &
    medically_necessary_service(C) &
    precertified_if_necessary(C) &
    ~beyond_limits(C) &
    ~general_exclusion_applies(C)





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Policy in effect
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: Does not currently capture conditions on withdrawal/leaves of absence, coverage on another Stanford-offered plan, or special extensions on coverage dates

% Whether the policy was in effect when the service was received
policy_in_effect(C, Policy) :-
    claim.date_service_received(C, Date) &
    claim.patient(C, Patient) &
    policy_in_effect_for_person_on_date(Policy, Patient, Date) &
    claim.waived_cardinal_care(C, no)

% Student enrolled in Autumn 2023
policy_in_effect_for_person_on_date(Policy, Patient, ServiceDate) :-
    policy.insuree(Policy, Patient) & 
    person.quarter_enrolled_stanford_2023_2024(Patient, autumn_quarter_2023) &
    date_between_dates_incl(ServiceDate, 2023_09_01, 2024_08_31)

% Student enrolled in Winter 2024
policy_in_effect_for_person_on_date(Policy, Patient, ServiceDate) :-
    policy.insuree(Policy, Patient) & 
    person.quarter_enrolled_stanford_2023_2024(Patient, winter_quarter_2024) &
    date_between_dates_incl(ServiceDate, 2024_01_01, 2024_08_31)

% Student enrolled in Spring 2024
policy_in_effect_for_person_on_date(Policy, Patient, ServiceDate) :-
    policy.insuree(Policy, Patient) & 
    person.quarter_enrolled_stanford_2023_2024(Patient, spring_quarter_2024) &
    date_between_dates_incl(ServiceDate, 2024_04_01, 2024_08_31)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Received from a valid provider
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: Encoding does not currently capture the cases where treatment began out-of-network before the policy began, or when the care is emergency or urgent care and received from an out-of-network provider

service_received_at_valid_provider(C, Policy) :-
    claim.location_service_received(C, Location) &
    member(Location, [
        stanford_health_care,
        menlo_medical_clinic,
        sutter_health_palo_alto_medical_foundation,
        tier_two_in_network
    ])

service_received_at_valid_provider(C, Policy) :-
    claim.location_service_received(C, other) &
    claim.service_available_at_tier_one_or_two_location(C, no)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eligible for service - additional eligibility requirements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

meets_additional_eligibility_requirements_if_present(C) :-
    covered_under_cardinal_care_23_24_benefit(C, B)

%%%% Infertility
%%%% Important question: how do we want to handle the explicit exclusions that don't actually apply to anything that is covered by the policy? E.g. page 65 of the Certificate of Coverage


%% Basic infertility services
covered_under_cardinal_care_23_24_benefit(C, treatment_of_infertility_benefit) :-
    claim.service_type(C, ServiceType) & 
    is_basic_infertility_service(ServiceType) &
    claim.patient(C, Patient) &
    is_infertile(C, Patient)


%% Comprehensive infertility services
covered_under_cardinal_care_23_24_benefit(C, treatment_of_infertility_benefit) :-
    claim.service_type(C, ServiceType) & 
    is_comprehensive_infertility_service(ServiceType) &
    claim.patient(C, Patient) &
    is_infertile(C, Patient) &
    meets_comprehensive_infertility_service_eligibility_requirements(C)

meets_comprehensive_infertility_service_eligibility_requirements(C) :-
    claim.patient(C, Patient) & 
    meets_no_voluntary_sterilization_req(C) &
    claim.demonstrated_and_documented_condition_causing_infertility(C, Condition) &
    ~member(Condition, [
        natural_menopause,
        natural_perimenopause,
        natural_male_reproductive_aging,
        other_natural_physiologic_process
    ]) &
    claim.successful_pregnancy_can_be_attained_through_less_costly_treatment_covered_by_plan(C, no) &
    meets_day_3_fsh_level_criteria(C, Patient)

meets_no_voluntary_sterilization_req(C) :-
    claim.patient_has_had_voluntary_sterilization(C, no)

meets_no_voluntary_sterilization_req(C) :-
    claim.patient_had_partner(C, yes) &
    claim.patients_partner_has_had_voluntary_sterilization(C, no)

% If under 40, only care about most recent test
% Also a requirement for under 35, but is redundant here
meets_day_3_fsh_level_criteria(C, Patient) :-
    age_at_time_of_service(C, Patient, Age) &
    lt(Age, 40) &
    most_recent_day_3_fsh_test(C, fsh_test(_, Level, _)) &
    lt(Level, 19)

% If multiple tests have the same datetime, then we can't decide which was most recent and this is not satisfied.
most_recent_day_3_fsh_test(C, fsh_test(Index, Level, DateTime)) :-
    claim.day_3_fsh_test(C, fsh_test(Index, Level, DateTime)) &
    countofall(T, claim.day_3_fsh_test(C, fsh_test(T, _, DateTime2)) & distinct(Index, T) & leq_datetime(DateTime, DateTime2), 0)

% If over 40, care about all tests performed after age 40
% Practically, this almost certainly means "since you became 40". But this is technically an assumption.
% Another practical assumption: There must be at least one test after age 40
meets_day_3_fsh_level_criteria(C, Patient) :-
    age_at_time_of_service(C, Patient, Age) &
    leq(40, Age) &
    claim.day_3_fsh_test_after_age_40(C, _) &
    countofall(T, claim.day_3_fsh_test_after_age_40(C, fsh_test(T, Level, _)) & leq(19, Level), 0)

% Gets day 3 fsh tests that have been performed since the patient became 40 years old
claim.day_3_fsh_test_after_age_40(C, fsh_test(Index, Level, DateTime)) :-
    claim.patient(C, Person) &
    person.dob(Person, DOB) &
    evaluate(parsedate(DOB), [Y, M, D]) &
    evaluate(maketimestamp(plus(Y, 40), M, D, 0, 0, 0), FortiethBirthdayTS) &
    claim.day_3_fsh_test(C, fsh_test(Index, Level, dt(Date, Time))) &
    datetimetotimestamp(Date, Time, TestTS) &
    leq(FortiethBirthdayTS, TestTS)

% N/A if male
meets_day_3_fsh_level_criteria(C, Patient) :-
    person.has_male_reproductive_organs(Patient, yes)



%% Advanced reproductive technology services
covered_under_cardinal_care_23_24_benefit(C, treatment_of_infertility_benefit) :-
    claim.service_type(C, ServiceType) & 
    is_art_service(ServiceType) &
    claim.patient(C, Patient) &
    meets_fertility_preservation_eligibility_requirements(C) &
    ~claim.location_service_received(C, other) % ART service-specific exclusion in the infertility treatment benefit. Not provided for out-of-network care.


meets_fertility_preservation_eligibility_requirements(C) :-
    claim.patient(C, Patient) &
    claim.patient_is_believed_to_be_fertile(C, yes) &
    claim.planned_service(C, PlannedService) &
    member(PlannedService, [
        chemotherapy,
        pelvic_radiotherapy,
        gonadotoxic_therapy,
        orchiectomy,
        oophorectomy,
        hysterectomy,
        orchiectomy_for_treatment_of_disease,
        oophorectomy_for_treatment_of_disease,
        other_treatment_demonstrated_to_result_in_infertility
    ]) &
    age_at_time_of_service(C, Patient, Age) &
    eggs_to_be_retrieved_meet_fsh_and_ovarian_responsiveness_criteria(C, Age)

% Source: Note 4 from CPB 0327 on 7/31/2024: https://www.aetna.com/cpb/medical/data/300_399/0327.html
% If under 40, just care about most recent test
eggs_to_be_retrieved_meet_fsh_and_ovarian_responsiveness_criteria(C, Age) :-
    claim.will_be_retrieving_eggs_for_use(C, yes) &
    lt(Age, 40) &
    most_recent_day_3_fsh_test(C, fsh_test(Index, Level, DateTime)) &
    lt(Level, 19) &
    meets_fsh_test_recency_req(C, fsh_test(Index, Level, DateTime))

% If 40 or over, care about all prior tests since became 40 (This is inferred from the "Comprehensive infertility services" FSH level reqs, and the Note 4 text "Check benefit plan descriptions")
% Another practical assumption: There must be at least one test after age 40
eggs_to_be_retrieved_meet_fsh_and_ovarian_responsiveness_criteria(C, Age) :-
    claim.will_be_retrieving_eggs_for_use(C, yes) &
    leq(40, Age) &
    claim.day_3_fsh_test_after_age_40(C, _) &
    countofall(T, claim.day_3_fsh_test_after_age_40(C, fsh_test(T, Level, _)) & leq(19, Level), 0)

% Source: Note 5 from CPB 0327 on 7/31/2024: https://www.aetna.com/cpb/medical/data/300_399/0327.html
% Additional (more generous) eligibility requirements if a woman has premature ovarian failure
eggs_to_be_retrieved_meet_fsh_and_ovarian_responsiveness_criteria(C, Age) :-
    claim.will_be_retrieving_eggs_for_use(C, yes) &
    leq(40, Age) &
    claim.patient(C, Patient) &
    claim.patient_has_premature_ovarian_failure(C, yes) &
    most_recent_day_3_fsh_test(C, fsh_test(_, Level, _)) &
    lt(Level, 19)


% Vacuously satisfied if not retrieving eggs for use
eggs_to_be_retrieved_meet_fsh_and_ovarian_responsiveness_criteria(C, _) :-
    claim.will_be_retrieving_eggs_for_use(C, no)

% If 39 or over, test must be in the last six months
% Bug Note: same datetime bugginess as in the NUM_MS_IN_TWO_WEEKS case
% Could be fixed by implementing date_n_months_before(ServiceDate, 6, DateSixMonthsBefore), but requires some function finickiness I would rather sort out with Mike
meets_fsh_test_recency_req(C, fsh_test(_, _, dt(TestDate, TestTime))) :-
    claim.patient(C, Patient) &
    age_at_time_of_service(C, Patient, Age) &
    leq(39, Age) &
    claim.date_service_received(C, ServiceDate) &
    get_timestamp_from_date(ServiceDate, ServiceDateTS) &
    evaluate(times(365, 24, 60, 60, 1000), NUM_MS_IN_SIX_MONTHS) &
    evaluate(minus(ServiceDateTS, NUM_MS_IN_SIX_MONTHS), SixMonthsBeforeTS) &
    datetimetotimestamp(TestDate, TestTime, TestDateTimeTS) &
    leq(SixMonthsBeforeTS, TestDateTimeTS)

% If under 39, no additional requirement
meets_fsh_test_recency_req(C, _) :-
    claim.patient(C, Patient) &
    age_at_time_of_service(C, Patient, Age) &
    lt(Age, 39)

%% General definition of infertility

% Female without a male partner
is_infertile(C, Person) :-
    person.has_female_reproductive_organs(Person, yes) &
    claim.patient_has_partner_with_male_reproductive_organs(C, no) &
    age_at_time_of_service(C, Person, Age) &
    meets_attempt_to_conceive_reqs_female_without_male_partner(C, Age)

% Under 35
meets_attempt_to_conceive_reqs_female_without_male_partner(C, PersonAge) :-
    lt(PersonAge, 35) &
    claim.num_cycles_donor_insemination(C, NumCycles) &
    leq(12, NumCycles)

% 35 and over
meets_attempt_to_conceive_reqs_female_without_male_partner(C, PersonAge) :-
    leq(35, PersonAge) &
    claim.num_cycles_donor_insemination(C, NumCycles) &
    leq(6, NumCycles)


% Female with a male partner
is_infertile(C, Person) :-
    person.has_female_reproductive_organs(Person, yes) &
    claim.patient_has_partner_with_male_reproductive_organs(C, yes) &
    age_at_time_of_service(C, Person, Age) &
    meets_attempt_to_conceive_reqs_female_with_male_partner(C, Age)


% Under 35
meets_attempt_to_conceive_reqs_female_with_male_partner(C, PersonAge) :-
    lt(PersonAge, 35) &
    claim.num_months_unprotected_intercourse(C, NumMonths) &
    leq(12, NumMonths)

% 35 or over
meets_attempt_to_conceive_reqs_female_with_male_partner(C, PersonAge) :-
    leq(35, PersonAge) &
    claim.num_months_unprotected_intercourse(C, NumMonths) &
    leq(6, NumMonths)

% Can also have tried donor insemination
meets_attempt_to_conceive_reqs_female_with_male_partner(C, PersonAge) :-
    meets_attempt_to_conceive_reqs_female_without_male_partner(C, PersonAge)


% Male with a female partner
is_infertile(C, Person) :-
    person.has_male_reproductive_organs(Person, yes) &
    claim.patient_has_partner_with_female_reproductive_organs(C, yes) &
    claim.age_of_patients_female_partner(C, PartnerAge) & 
    meets_attempt_to_conceive_reqs_male_with_female_partner(C, PartnerAge)

% Female partner under 35
meets_attempt_to_conceive_reqs_male_with_female_partner(C, PartnerAge) :-
    lt(PartnerAge, 35) &
    claim.num_months_unprotected_intercourse(C, NumMonths) &
    leq(12, NumMonths)

% Female partner 35 or over
meets_attempt_to_conceive_reqs_male_with_female_partner(C, PartnerAge) :-
    leq(35, PartnerAge) &
    claim.num_months_unprotected_intercourse(C, NumMonths) &
    leq(6, NumMonths)


% Male without a female partner
% Bug Note: This is actually buggy because the policy would care about dates, not solar/sidereal time - should use a real datetime module for computing difference of two weeks
is_infertile(C, Person) :-
    person.has_male_reproductive_organs(Person, yes) &
    claim.patient_has_partner_with_female_reproductive_organs(C, no) &
    claim.abnormal_semen_analysis_on_date(C, Date1) &
    claim.abnormal_semen_analysis_on_date(C, Date2) & 
    get_timestamp_from_date(Date1, TS1) &
    get_timestamp_from_date(Date2, TS2) &
    evaluate(minus(TS2,TS1), TimeDiff) &
    evaluate(times(14, 24, 60, 60, 1000), NUM_MS_IN_TWO_WEEKS) &
    leq(NUM_MS_IN_TWO_WEEKS, TimeDiff)
    

% Person with gender dysphoria
is_infertile(C, _) :-
    claim.patient_diagnosed_with_gender_dysphoria(C, yes)

%%%% Family Planning Services - Female Contraceptives 

%% Counseling services
covered_under_cardinal_care_23_24_benefit(C, family_planning_services_female_contraceptives_benefit) :-
    claim.service_type(C, female_contraceptive_counseling) &
    is_covered_type_of_contraceptive_counseling(C) &
    is_group_or_individual_counseling(C)

is_covered_type_of_contraceptive_counseling(C) :-
    claim.type_of_contraceptive_counseling(C, T) &
    member(T, [
        methods,
        management_of_side_effects,
        adherence
    ])

is_group_or_individual_counseling(C) :-
    claim.counseling_setting(C, S) &
    member(S, [
        individual, 
        group
    ])


%% Contraceptives (drugs or devices) - includes OTC prescribed by provider, and follow-up care
% Note on interpretation: "prescribed by your provider" could modify either the OTC, or all prior 
covered_under_cardinal_care_23_24_benefit(C, family_planning_services_female_contraceptives_benefit) :-
    claim.service_type(C, female_contraceptive_drugs_or_devices_and_follow_up_care) &
    claim.type_of_female_contraceptive_method_provided(C, Type) & 
    fda_approved_female_contraceptive_method(Type) &
    female_contraceptive_method_is_prescribed_if_otc(C) &
    valid_mode_of_providing_female_contraceptive_method(C)

    
female_contraceptive_method_is_prescribed_if_otc(C) :-
    claim.type_of_female_contraceptive_method_provided(C, Method) &
    ~otc_female_contraceptive_method(Method)

female_contraceptive_method_is_prescribed_if_otc(C) :-
    claim.type_of_female_contraceptive_method_provided(C, Method) &
    otc_female_contraceptive_method(Method) &
    claim.otc_female_contraceptive_method_is_prescribed_by_provider(C, yes)

otc_female_contraceptive_method(the_mini_pill_progestin_norgestrel)
otc_female_contraceptive_method(male_condom)
otc_female_contraceptive_method(sponge_with_spermicide)
otc_female_contraceptive_method(female_condom)
otc_female_contraceptive_method(spermicide_otc)
otc_female_contraceptive_method(levonorgestrel_1.5_mg)

valid_mode_of_providing_female_contraceptive_method(C) :-
    claim.mode_of_providing_service(C, Mode) &
    member(Mode, [
        provided_by,
        administered_by,
        removed_by,
        provided_related_service,
        provided_related_supplies,
        provided_follow_up_care
    ])

fda_approved_female_contraceptive_method(sterilization_surgery_for_women)
fda_approved_female_contraceptive_method(iud_without_hormone)
fda_approved_female_contraceptive_method(iud_with_progestin)
fda_approved_female_contraceptive_method(implantable_rod)
fda_approved_female_contraceptive_method(contraceptive_injection_shot)
fda_approved_female_contraceptive_method(the_pill_estrogen_and_progestin)
fda_approved_female_contraceptive_method(the_pill_estrogen_and_progestin_extended_continuous)
fda_approved_female_contraceptive_method(the_mini_pill_progestin)
fda_approved_female_contraceptive_method(the_mini_pill_progestin_norgestrel)
fda_approved_female_contraceptive_method(patch_transdermal)
fda_approved_female_contraceptive_method(vaginal_contraceptive_ring)
fda_approved_female_contraceptive_method(male_condom)
fda_approved_female_contraceptive_method(diaphragm_with_spermicide)
fda_approved_female_contraceptive_method(sponge_with_spermicide)
fda_approved_female_contraceptive_method(cervical_cap_with_spermicide)
fda_approved_female_contraceptive_method(female_condom)
fda_approved_female_contraceptive_method(spermicide_otc)
fda_approved_female_contraceptive_method(spermicide_prescription)
fda_approved_female_contraceptive_method(levonorgestrel_1.5_mg)
fda_approved_female_contraceptive_method(ulipristal_acetate)


%% Voluntary sterilization
% Note on interpretation: follow-up care is not quite explicitly covered given the wording, but intuitively it should be. Trying very hard to avoid a false positive here.
covered_under_cardinal_care_23_24_benefit(C, family_planning_services_female_contraceptives_benefit) :-
    claim.service_type(C, female_voluntary_sterilization) &
    claim.type_of_female_voluntary_sterilization_procedure_service_or_supplies(C, Procedure) &
    member(Procedure, [
        tubal_ligation,
        sterilization_implants,
        related_services,
        related_supplies        
    ])

%%%% Preventive Care Immunizations
covered_under_cardinal_care_23_24_benefit(C, preventive_care_immunizations_benefit) :-
    claim.service_type(C, preventive_care_immunization) &
    is_immunization_for_preventive_care(C) &
    claim.immunization_for_disease(C, Disease) &
    infectious_disease_for_which_cdc_acip_recommends_immunization(Disease)

is_immunization_for_preventive_care(C) :-
    claim.reason_for_immunization(C, R) &
    member(R, [
        preventive_care,
        recommended_as_preventive_care
    ]) % Other options: required_for_employment, required_for_travel, other

% Note on policy wording interpretation: I am reading the policy as saying that the condition is on the CDC ACIP's recommendation as to which infectious diseases be vaccinated against, not which vaccines be used
infectious_disease_for_which_cdc_acip_recommends_immunization(influenza_disease)
infectious_disease_for_which_cdc_acip_recommends_immunization(covid19_disease)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Medical necessity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


medically_necessary_service(C) :-
    claim.service_type(C, diagnose_and_evaluate_underlying_medical_cause_of_infertility)

medically_necessary_service(C) :-
    claim.service_type(C, surgery_to_treat_underlying_medical_cause_of_infertility)

medically_necessary_service(C) :-
    claim.service_type(C, ovulation_induction_cycle_with_menotropins) &
    claim.patient(C, Patient) &
    age_at_time_of_service(C, Patient, Age) &
    leq(Age, 37) &
    meets_ovulation_induction_cpb_reqs(C)

meets_ovulation_induction_cpb_reqs(C) :-
    claim.patient(C, Patient) &
    age_at_time_of_service(C, Patient, Age) &
    lt(Age, 35) &
    meets_ovulation_induction_reqs_under_35(C)


meets_ovulation_induction_reqs_under_35(C) :-
    claim.num_months_regular_intravaginal_inseminations(C, N) &
    leq(12, N)

meets_ovulation_induction_reqs_under_35(C) :-
    claim.num_cycles_timed_intrauterine_intracervical_inseminations(C, N) &
    leq(4, N)

meets_ovulation_induction_cpb_reqs(C) :-
    claim.patient(C, Patient) &
    age_at_time_of_service(C, Patient, Age) &
    leq(35, Age) &
    meets_ovulation_induction_reqs_35_and_over(C)

meets_ovulation_induction_reqs_under_35(C) :-
    claim.num_months_regular_intravaginal_inseminations(C, N) &
    leq(6, N)

meets_ovulation_induction_reqs_35_and_over(C) :-
    claim.num_cycles_timed_intrauterine_intracervical_inseminations(C, N) &
    leq(3, N)


% Based on artificial inseminations being considered medically necessary from CPB 0327 section "Artificial Inseminations"
medically_necessary_service(C) :-
    claim.service_type(C, intrauterine_insemination)

medically_necessary_service(C) :-
    claim.service_type(C, ivf_for_fertility_preservation) & 
    meets_ivf_cpb_reqs(C)

% If the patient has premature ovarian failure, ivf is medically necessary until 45
% Note: CPB 0327 Note 5 partially defines premature ovarian failure, but doesn't specify which D3 FSH levels must be taken into account
meets_ivf_cpb_reqs(C) :-
    claim.patient(C, Patient) &
    claim.patient_has_premature_ovarian_failure(C, yes) &
    age_at_time_of_service(C, Patient, Age) &
    lt(Age, 45)


% CPB 0327 E.3.a.i
meets_ivf_cpb_reqs(C) :-
    claim.patient(C, Patient) &
    age_at_time_of_service(C, Patient, Age) &
    leq(Age, 37) &
    claim.num_cycles_oral_or_injectable_ovulation_induction(C, 3)

% CPB 0327 E.3.a.ii
meets_ivf_cpb_reqs(C) :-
    claim.patient(C, Patient) &
    age_at_time_of_service(C, Patient, Age) &
    leq(38, Age)


% CPB 0327 E.3.b
% Note: They list some examples of such individuals, but don't seem to be comprehensive
meets_ivf_cpb_reqs(C) :-
    claim.inseminations_not_expected_to_be_effective_and_ivf_expected_to_be_only_effective_treatment(C, yes)


% CPB 0327 E.3.c
meets_ivf_cpb_reqs(C) :-
    claim.service_is_ivf_with_embryo_transfer(C, yes)


% Almost redundant with eligibility reqs listed in the policy itself
% Is also more restrictive than the planned service constraint in the policy's eligibility reqs, even though the policy reqs are likely to be the ones honored here
medically_necessary_service(C) :-
    claim.service_type(C, cryopreservation_for_fertility_preservation) &
    claim.planned_service(C, PlannedService) &
    member(PlannedService, [
        chemotherapy,
        pelvic_radiotherapy,
        gonadotoxic_therapy,
        orchiectomy_for_treatment_of_disease,
        oophorectomy_for_treatment_of_disease
    ])

%%%% Family Planning Services - Female Contraceptives 

medically_necessary_service(C) :-
    claim.service_type(C, ServiceType) &
    is_preventive_care_service(ServiceType)

% Preventive care is a larger category of benefits, including immunizations
is_preventive_care_service(ServiceType) :-
    female_contraceptives_service(ServiceType)

% Is a service under the female contraceptives benefit
female_contraceptives_service(female_contraceptive_counseling)
female_contraceptives_service(female_contraceptive_drugs_or_devices_and_follow_up_care)
female_contraceptives_service(female_voluntary_sterilization)


%%%% Preventive Care Immunizations

% Preventive care is a larger category of benefits, including female contracepives
% Note: CPB 0035 concerns Influenza Vaccines, but just points to the CDC ACIP guidelines
is_preventive_care_service(preventive_care_immunization)



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Precertified if necessary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
precertified_if_necessary(C) :-
    claim.service_type(C, ServiceType) &
    requires_precertification(ServiceType) & 
    claim.precertification_received(C, yes)

precertified_if_necessary(C) :-
    claim.service_type(C, ServiceType) &
    ~requires_precertification(ServiceType)


%%%% Infertility

requires_precertification(ServiceType) :-
    is_art_service(ServiceType)

requires_precertification(ServiceType) :-
    is_comprehensive_infertility_service(ServiceType)

is_basic_infertility_service(diagnose_and_evaluate_underlying_medical_cause_of_infertility)
is_basic_infertility_service(surgery_to_treat_underlying_medical_cause_of_infertility)

is_comprehensive_infertility_service(ovulation_induction_cycle_with_menotropins)
is_comprehensive_infertility_service(intrauterine_insemination)

is_art_service(ivf_for_fertility_preservation)
is_art_service(cryopreservation_for_fertility_preservation)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Limitations from Schedule of Benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Note: final encoding will compute these from other claims, but right now we're only doing one claim at a time
% Maximum six covered attempts at IUI in a policy year (between September 1 2023 and August 31 2024, in this case)
beyond_limits(Claim) :-
    claim.service_type(Claim, intrauterine_insemination) &
    claim.num_other_covered_artificial_insemination_attempts(Claim, N) &
    leq(6, N)

beyond_limits(Claim) :-
    claim.service_type(Claim, ServiceType) &
    is_art_service(ServiceType) &
    claim.num_other_covered_art_services(Claim, N) &
    leq(1, N)
    
%%%% Preventive Care Immunizations
beyond_limits(Claim) :-
    claim.service_type(Claim, preventive_care_immunization) &
    claim.date_service_received(Claim, Date) &
    date_between_dates_incl(Date, 2024_01_01, 2024_12_31) & 
    ~below_2024_cdc_acip_age_guideline_max(Claim)

beyond_limits(Claim) :-
    claim.service_type(Claim, preventive_care_immunization) &
    claim.date_service_received(Claim, Date) &
    date_between_dates_incl(Date, 2023_01_01, 2023_12_31) & 
    ~below_2023_cdc_acip_age_guideline_max(Claim)


%% CDC ACIP Guidelines
below_2024_cdc_acip_age_guideline_max(C) :-
    claim.immunization_for_disease(C, D) &
    claim.patient(C, P) &
    age_at_time_of_service(C, P, A) &
    below_2024_cdc_acip_age_guideline_max_by_disease_and_age(D, A, C)

%% Influenza vaccine
% For ages >= 9 years, one dose annually (unless received first dose before turning 9, and needed multiple doses. That case is handled above.)
below_2024_cdc_acip_age_guideline_max_by_disease_and_age(influenza_disease, Age, Claim) :-
    claim.patient(Claim, P) &
    leq(9, Age) &
    countofall(I, claim.2023_2024_influenza_vaccination(Claim, influenza_vaccination_event(I, _)), 0)

% For ages [6 months, 9 years), depends on number of doses received in prior seasons
below_2024_cdc_acip_age_guideline_max_by_disease_and_age(influenza_disease, Age, Claim) :-
    patient_geq_6_months_old_at_time_of_service(Claim) &
    lt(Age, 9) &
    max_doses_flu_vaccine_allowed_for_child_6_months_through_9_years(Claim, MaxDoses) &
    countofall(I, claim.2023_2024_influenza_vaccination(Claim, influenza_vaccination_event(I, _)), ReceivedDoses) &
    lt(ReceivedDoses, MaxDoses)

% If child aged 9 hasn't received any doses of 2023-2024 yet, then 1 is allowed
below_2024_cdc_acip_age_guideline_max_by_disease_and_age(influenza_disease, 9, Claim) :-
    countofall(I, claim.2023_2024_influenza_vaccination(Claim, influenza_vaccination_event(I, _)), 0)

% If child aged 9 had received precisely one dose when they were 8 and they were allowed to receive two doses, then another is allowed
below_2024_cdc_acip_age_guideline_max_by_disease_and_age(influenza_disease, 9, Claim) :-
    countofall(I, claim.2023_2024_influenza_vaccination(Claim, influenza_vaccination_event(I, _)), 1) &
    claim.2023_2024_influenza_vaccination(Claim, influenza_vaccination_event(_, VaccinationDate)) & 
    claim.patient(Claim, P) &
    age_on_date(P, VaccinationDate, 8) &
    max_doses_flu_vaccine_allowed_for_child_6_months_through_9_years(Claim, 2)
    
    % 1 dose if child had previously received >= 2 doses of tri- or quadrivalent flu vaccine >= 4 weeks apart before July 2023
    % 2 doses >= 4 weeks apart if not, or if child's vaccination history is unknown
max_doses_flu_vaccine_allowed_for_child_6_months_through_9_years(Claim, 1) :-
    claim.patient_had_received_at_least_two_doses_flu_vaccine_before_july_2023(Claim, yes_ternary)

max_doses_flu_vaccine_allowed_for_child_6_months_through_9_years(Claim, 2) :-
    claim.patient_had_received_at_least_two_doses_flu_vaccine_before_july_2023(Claim, W) &
    member(W, [unknown, no_ternary])


%% COVID-19 vaccine
below_2024_cdc_acip_age_guideline_max_by_disease_and_age(covid19_disease, Age, Claim) :-
    patient_age_bracket_for_covid19_vaccination(Claim, Age, AgeBracket) &
    claim.patient_is_immunocompromised(Claim, ImmStatus) & 
    claim.covid19_vaccine_brand(Claim, Brand) &
    covid19_dose_counts(Claim, NumOldModerna, NumOldPfizer, NumOldNovavax, NumOldJnJ, NumUpdatedOfBrand) &
    max_allowed_doses_covid19_vaccine(ImmStatus, AgeBracket, Brand, MaxDoses, dose_counts(NumOldModerna, NumOldPfizer, NumOldNovavax, NumOldJnJ)) &
    lt(NumUpdatedOfBrand, MaxDoses) &
    ~already_begun_another_updated_2023_2024_covid19_vaccination_series(Claim)

patient_age_bracket_for_covid19_vaccination(Claim, Age, 6_months_to_4_years) :-
    patient_geq_6_months_old_at_time_of_service(Claim) &
    leq(Age, 4)

patient_age_bracket_for_covid19_vaccination(Claim, Age, 5_to_11_years) :-
    leq(5, Age) &
    leq(Age, 11)

patient_age_bracket_for_covid19_vaccination(Claim, Age, 12_years_and_older) :-
    leq(12, Age)

covid19_dose_counts(Claim, NumOldModerna, NumOldPfizer, NumOldNovavax, NumOldJnJ, NumUpdatedOfBrand) :-
    countofall(I, claim.covid19_vaccination(Claim, covid19_vaccination_event(I, moderna, UpdatedStatus)) & distinct(UpdatedStatus, updated_2023_2024), NumOldModerna) &
    countofall(I, claim.covid19_vaccination(Claim, covid19_vaccination_event(I, pfizer_biontech, UpdatedStatus)) & distinct(UpdatedStatus, updated_2023_2024), NumOldPfizer) &
    countofall(I, claim.covid19_vaccination(Claim, covid19_vaccination_event(I, novavax, UpdatedStatus)) & distinct(UpdatedStatus, updated_2023_2024), NumOldNovavax) &
    countofall(I, claim.covid19_vaccination(Claim, covid19_vaccination_event(I, j_n_j, UpdatedStatus)) & distinct(UpdatedStatus, updated_2023_2024), NumOldJnJ) &
    claim.covid19_vaccine_brand(Claim, Brand) &
    countofall(I, claim.covid19_vaccination(Claim, covid19_vaccination_event(I, Brand, updated_2023_2024)), NumUpdatedOfBrand)

already_begun_another_updated_2023_2024_covid19_vaccination_series(Claim) :-
    claim.covid19_vaccine_brand(Claim, Brand1) &
    claim.covid19_vaccination(Claim, covid19_vaccination_event(I, Brand2, updated_2023_2024)) &
    distinct(Brand1, Brand2)


%%% Covid19 Maximimums - Not Immunocompromised %%%
% dose_counts format: dose_counts(NumOldModerna, NumOldPfizer, NumOldNovavax, NumOldJnJ)
% For ages [6 months, 4 years], 
    % If unvaccinated, 2 doses Moderna or 3 doses Pfizer-BioNTech  
max_allowed_doses_covid19_vaccine(no, 6_months_to_4_years, moderna, 2, dose_counts(0, 0, 0, 0))
max_allowed_doses_covid19_vaccine(no, 6_months_to_4_years, pfizer_biontech, 3, dose_counts(0, 0, 0, 0))

    % If vaccinated
        % with >= 1 doses Moderna, then 1 dose Moderna
max_allowed_doses_covid19_vaccine(no, 6_months_to_4_years, moderna, 1, dose_counts(NumOldModerna, _, _, _)) :-
    leq(1, NumOldModerna)

        % with 1 dose Pfizer-BioNTech, then 2 doses Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(no, 6_months_to_4_years, pfizer_biontech, 2, dose_counts(_, 1, _, _))

        % with >=2 doses Pfizer-BioNTech, then 1 dose Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(no, 6_months_to_4_years, pfizer_biontech, 1, dose_counts(_, NumOldPfizer, _, _)) :-
    leq(2, NumOldPfizer)

% For ages [5 years, 11 years], regardless of vaccination history,
    % 1 dose Moderna or Pfizer-BioNTech 
max_allowed_doses_covid19_vaccine(no, 5_to_11_years, moderna, 1, dose_counts(_, _, _, _))
max_allowed_doses_covid19_vaccine(no, 5_to_11_years, pfizer_biontech, 1, dose_counts(_, _, _, _))

% For ages >= 12 years,
    % If unvaccinated, 1 dose Moderna, 2 doses Novavax, or 1 dose Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(no, 12_years_and_older, moderna, 1, dose_counts(0, 0, 0, 0))
max_allowed_doses_covid19_vaccine(no, 12_years_and_older, novavax, 2, dose_counts(0, 0, 0, 0))
max_allowed_doses_covid19_vaccine(no, 12_years_and_older, pfizer_biontech, 1, dose_counts(0, 0, 0, 0))

    % If vaccinated at all, 1 dose Moderna, Novavax, or Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(no, 12_years_and_older, Brand, 1, DoseCounts) :-
    distinct(DoseCounts, dose_counts(0, 0, 0, 0)) &
    member(Brand, [moderna, novavax, pfizer_biontech])


%%% Covid19 Maximimums - Immunocompromised %%%
% For ages [6 months, 4 years], 
    % If unvaccinated, 3 doses Moderna or Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(yes, 6_months_to_4_years, moderna, 3, dose_counts(0, 0, 0, 0))
max_allowed_doses_covid19_vaccine(yes, 6_months_to_4_years, pfizer_biontech, 3, dose_counts(0, 0, 0, 0))
    
    % If vaccinated,
        % With 1 dose Moderna, then 2 doses Moderna
max_allowed_doses_covid19_vaccine(yes, 6_months_to_4_years, moderna, 2, dose_counts(1, _, _, _))
        % With >= 2 doses Moderna, then 1 dose Moderna
max_allowed_doses_covid19_vaccine(yes, 6_months_to_4_years, moderna, 1, dose_counts(NumOldModerna, _, _, _)) :-
    leq(2, NumOldModerna)
        % With 1 dose Pfizer-BioNTech, then 2 doses Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(yes, 6_months_to_4_years, pfizer_biontech, 2, dose_counts(_, 1, _, _))
        % With >= 2 doses Pfizer-BioNTech, then 1 dose Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(yes, 6_months_to_4_years, pfizer_biontech, 1, dose_counts(_, NumOldPfizer, _, _)) :-
    leq(2, NumOldPfizer)


% For ages [5 years, 11 years], 
    % If unvaccinated, 3 doses Moderna or Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(yes, 5_to_11_years, moderna, 3, dose_counts(0, 0, 0, 0))
max_allowed_doses_covid19_vaccine(yes, 5_to_11_years, pfizer_biontech, 3, dose_counts(0, 0, 0, 0))

    % If vaccinated,
        % With 1 dose Moderna, then 2 doses Moderna
max_allowed_doses_covid19_vaccine(yes, 5_to_11_years, moderna, 2, dose_counts(1, _, _, _))
        % With 2 doses Moderna, then 1 dose Moderna
max_allowed_doses_covid19_vaccine(yes, 5_to_11_years, moderna, 1, dose_counts(2, _, _, _))
        % With 1 dose Pfizer-BioNTech, then 2 doses Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(yes, 5_to_11_years, pfizer_biontech, 2, dose_counts(_, 1, _, _))
        % With 2 doses Pfizer-BioNTech, then 1 dose Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(yes, 5_to_11_years, pfizer_biontech, 1, dose_counts(_, 2, _, _))
        % With 3 or more doses any mrna vaccine (i.e. Moderna or Pfizer-BioNTech), then 1 dose Moderna or Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(yes, 5_to_11_years, Brand, 1, dose_counts(NumOldModerna, NumOldPfizer, _, _)) :-
    evaluate(plus(NumOldModerna, NumOldPfizer), NumOldmrna) &
    leq(3, NumOldmrna) &
    member(Brand, [moderna, pfizer_biontech])

% For ages >= 12 years, 
    % If unvaccinated, 3 doses Moderna or Pfizer-BioNTech, or 2 doses Novavax
max_allowed_doses_covid19_vaccine(yes, 12_years_and_older, moderna, 3, dose_counts(0, 0, 0, 0))
max_allowed_doses_covid19_vaccine(yes, 12_years_and_older, novavax, 3, dose_counts(0, 0, 0, 0))
max_allowed_doses_covid19_vaccine(yes, 12_years_and_older, pfizer_biontech, 3, dose_counts(0, 0, 0, 0))

    % If vaccinated,
        % With 1 dose Moderna, then 2 doses Moderna
max_allowed_doses_covid19_vaccine(yes, 12_years_and_older, moderna, 2, dose_counts(1, _, _, _))
        % With 2 doses Moderna, then 1 dose Moderna
max_allowed_doses_covid19_vaccine(yes, 12_years_and_older, moderna, 1, dose_counts(2, _, _, _))
        % With 1 dose Pfizer-BioNTech, then 2 doses Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(yes, 12_years_and_older, pfizer_biontech, 2, dose_counts(_, 1,  _, _))
        % With 2 doses Pfizer-BioNTech, then 1 dose Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(yes, 12_years_and_older, pfizer_biontech, 1, dose_counts(_, 2, _, _))
        % With 3 or more doses any mrna vaccine (i.e. not Novavax), or >= 1 doses Novavax or J&J,
            % then 1 dose Moderna, Novavax, or Pfizer-BioNTech
max_allowed_doses_covid19_vaccine(yes, 12_years_and_older, Brand, 1, dose_counts(NumOldModerna, NumOldPfizer, _, _)) :-
    evaluate(plus(NumOldModerna, NumOldPfizer), NumOldmrna) &
    leq(3, NumOldmrna) &
    leq(Brand, [moderna, novavax, pfizer_biontech])

max_allowed_doses_covid19_vaccine(yes, 12_years_and_older, Brand, 1, dose_counts(_, _, NumOldNovavax, NumOldJnJ)) :-
    evaluate(plus(NumOldNovavax, NumOldJnJ), NumOldNonmrna) &
    leq(1, NumOldNonmrna) &
    leq(Brand, [moderna, novavax, pfizer_biontech])
    
    
% Note: Only doing 2024 guidelines, since we won't be using 2023 guidelines in the final service if we don't make the 2023-2024 policy available
below_2023_cdc_acip_age_guideline_max(Claim) :-
    below_2024_cdc_acip_age_guideline_max(Claim)



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% General exclusions 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Important note: only those applicable to the Treatment of Infertility benefits have been encoded so far

% Armed forces
general_exclusion_applies(C) :-
    claim.reception_of_service_or_supplies_resulted_from_service_in_armed_forces(C, yes)

% Beyond legal authority
general_exclusion_applies(C) :-
    claim.service_or_supplies_provided_by_provider_acting_beyond_scope_of_legal_authority(C, yes)

% Clinical trial therapies (experimental or investigational)
general_exclusion_applies(C) :-
    claim.service_is_clinical_trial_therapy_experimental_investigational(C, yes)


% Experimental or investigational - Not encoded right now, as this should be a function of the service selected and whether it meets certain requirements re: clinical trials for terminal etc. conditions
%general_exclusion_applies(C) :-
%    claim.service_is_experimental_investigational(C)

% Gene-based, cellular and other innovative therapies (GCIT)
% Not really applicable to infertility treatment, as it's primarily for life-threating conditions. Need to do a thorough check to be sure, though.
% general_exclusion_applies(C) :-

% Genetic care
general_exclusion_applies(C) :-
    claim.service_is_genetic_care(C, yes) &
    claim.service_for_correction_of_congenital_birth_defects(C, no)

% Incidental surgeries
% Note: Not encoding this now because it is implied by the fact that incidental surgeries are non-medically necessary
%general_exclusion_applies(C) :-
%    claim.service_is_incidental_surgery(C, yes)

% Judgment or settlement
general_exclusion_applies(C) :-
    claim.payment_for_service_made_for_judgment_settlement(C, yes)

% Non-U.S. citizen
% Note: if received as part of emergency services or urgent care, different conditions apply
% Note 2: Not encoded right now because this is implied by the in-network requirements of the policy
% general_exclusion_applies(C) :-

% Services provided by a family member
% Note: this should ultimately be inferrable from the provider and kinship relations
general_exclusion_applies(C) :-
    claim.service_provided_by_family_member(C, yes)

% Services, supplies and drugs received outside of the United States
% Note: the Aetna in-network locations should prohibit this from happening. Will encode this later, as a function of the country in which providers/facilities are located
%general_exclusion_applies(C) :-
%    claim.service_received_

% Treatment in a federal, state, or governmental entity
general_exclusion_applies(C) :-
    claim.treated_in_facility_owned_or_operated_by_governmental_entity(C, yes)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


age_at_time_of_service(Claim, Person, Age) :-
    claim.date_service_received(Claim, ServiceDate) &
    age_on_date(Person, ServiceDate, Age)

age_on_date(Person, Date, Age) :-
    person.dob(Person, DOB) &
    evaluate(parsedate(Date),[Year,Month,Day]) &
    evaluate(parsedate(DOB),[DOBYear,DOBMonth,DOBDay]) &
    evaluate(minus(Year,Year), YearDiff) &
    not_yet_birthday_delta(Month,Day, DOBMonth, DOBDay, Delta) &
    evaluate(plus(YearDiff, Delta), Age)


not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    lt(Month, DOBMonth)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, -1) :-
    same(Month, DOBMonth) &
    lt(Day, DOBDay)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, 0) :-
    lt(DOBMonth, Month)

not_yet_birthday_delta(Month, Day, DOBMonth, DOBDay, 0) :-
    same(Month, DOBMonth) &
    leq(DOBDay, Day)

patient_geq_6_months_old_at_time_of_service(Claim) :-
    claim.date_service_received(Claim, ServiceDate) &
    claim.patient(Claim, Patient) & 
    person.dob(Patient, DOB) &
    n_months_diff(DOB, ServiceDate, N) &
    leq(6, N)


not_yet_day_of_month_delta(D1, D2, 0) :-
    leq(D1, D2)

not_yet_day_of_month_delta(D1, D2, -1) :-
    lt(D2, D1)

date_between_dates_incl(Date, BeginDateRange, EndDateRange) :-
    symleq(BeginDateRange, Date) &
    symleq(Date, EndDateRange)

leq_datetime(dt(Date1, Time1), dt(Date2, Time2)) :-
    datetimetotimestamp(Date1, Time1, TS1) &
    datetimetotimestamp(Date2, Time2, TS2) & 
    leq(TS1, TS2)

get_timestamp_from_date(DATE,STAMP) :-
  evaluate(parsedate(DATE),[Y,M,D]) &
  evaluate(maketimestamp(Y,M,D,0,0,0),STAMP)

n_months_diff(EarlierDate, LaterDate, N) :-
    evaluate(parsedate(EarlierDate),[EY,EM,ED]) & 
    evaluate(parsedate(LaterDate),[LY,LM,LD]) &
    evaluate(times(minus(LY, EY), 12), MonthsFromYear) & 
    not_yet_day_of_month_delta(ED, LD, Delta) &
    evaluate(plus(MonthsFromYear, minus(LM, EM), Delta), N)

lt(X, Y) :-
    leq(X, Y) &
    distinct(X, Y)



%%%% Redundant, because these are general rules that are loaded into each page
parsedate(DATE) :=
    map(readstring,tail(matches(stringify(DATE),"(....)_(..)_(..)")))

parsetime(TIME) :=
    map(readstring,tail(matches(stringify(TIME),"(..)_(..)_(..)")))

tail(X!L) := L

datetimetotimestamp(DATE,TIME,STAMP) :- 
    evaluate(parsedate(DATE),[Y,M,D]) & 
    evaluate(parsetime(TIME),[H,N,S]) & 
    evaluate(maketimestamp(Y,M,D,H,N,S),STAMP) 